{
  "nbformat": 4,
  "nbformat_minor": 0,
  "metadata": {
    "colab": {
      "provenance": []
    },
    "kernelspec": {
      "name": "python3",
      "display_name": "Python 3"
    },
    "language_info": {
      "name": "python"
    },
    "widgets": {
      "application/vnd.jupyter.widget-state+json": {
        "ac79438aab6c4f229d45b3f650861d8f": {
          "model_module": "@jupyter-widgets/controls",
          "model_name": "HBoxModel",
          "model_module_version": "1.5.0",
          "state": {
            "_dom_classes": [],
            "_model_module": "@jupyter-widgets/controls",
            "_model_module_version": "1.5.0",
            "_model_name": "HBoxModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/controls",
            "_view_module_version": "1.5.0",
            "_view_name": "HBoxView",
            "box_style": "",
            "children": [
              "IPY_MODEL_31708b4d52d74dde9691a91fafb979b5",
              "IPY_MODEL_9f107bcd2ae04edfada70e3c7ebd07b1"
            ],
            "layout": "IPY_MODEL_aab1024cfd6f404395c1567b319af45d"
          }
        },
        "31708b4d52d74dde9691a91fafb979b5": {
          "model_module": "@jupyter-widgets/controls",
          "model_name": "VBoxModel",
          "model_module_version": "1.5.0",
          "state": {
            "_dom_classes": [],
            "_model_module": "@jupyter-widgets/controls",
            "_model_module_version": "1.5.0",
            "_model_name": "VBoxModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/controls",
            "_view_module_version": "1.5.0",
            "_view_name": "VBoxView",
            "box_style": "",
            "children": [
              "IPY_MODEL_1ee8c10676a14a8d90ee1f3651810355",
              "IPY_MODEL_aa12d17ae00d44558fcf4d03cd25064b",
              "IPY_MODEL_af663a8aa17d48a2b436733f8cfc1e60",
              "IPY_MODEL_d7aeec065c52444ca203a7cb3a33575b"
            ],
            "layout": "IPY_MODEL_fde6384f361c4cf59c1e6362734cfaac"
          }
        },
        "9f107bcd2ae04edfada70e3c7ebd07b1": {
          "model_module": "@jupyter-widgets/controls",
          "model_name": "VBoxModel",
          "model_module_version": "1.5.0",
          "state": {
            "_dom_classes": [],
            "_model_module": "@jupyter-widgets/controls",
            "_model_module_version": "1.5.0",
            "_model_name": "VBoxModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/controls",
            "_view_module_version": "1.5.0",
            "_view_name": "VBoxView",
            "box_style": "",
            "children": [
              "IPY_MODEL_b6814d9d5e8a412e8028de50a0f0c863",
              "IPY_MODEL_9998ed87731a4b8f9c141e887a71f51e",
              "IPY_MODEL_4567b2a7c3154e3cae396de221ea52e1",
              "IPY_MODEL_f61abbb25db8461384fe2330c0c475e4",
              "IPY_MODEL_4748b1b7d8a2408c88fe9b2dce449e3d"
            ],
            "layout": "IPY_MODEL_f20533869f6045189b5efef44bc3282e"
          }
        },
        "aab1024cfd6f404395c1567b319af45d": {
          "model_module": "@jupyter-widgets/base",
          "model_name": "LayoutModel",
          "model_module_version": "1.2.0",
          "state": {
            "_model_module": "@jupyter-widgets/base",
            "_model_module_version": "1.2.0",
            "_model_name": "LayoutModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/base",
            "_view_module_version": "1.2.0",
            "_view_name": "LayoutView",
            "align_content": null,
            "align_items": null,
            "align_self": null,
            "border": null,
            "bottom": null,
            "display": null,
            "flex": null,
            "flex_flow": null,
            "grid_area": null,
            "grid_auto_columns": null,
            "grid_auto_flow": null,
            "grid_auto_rows": null,
            "grid_column": null,
            "grid_gap": null,
            "grid_row": null,
            "grid_template_areas": null,
            "grid_template_columns": null,
            "grid_template_rows": null,
            "height": null,
            "justify_content": null,
            "justify_items": null,
            "left": null,
            "margin": null,
            "max_height": null,
            "max_width": null,
            "min_height": null,
            "min_width": null,
            "object_fit": null,
            "object_position": null,
            "order": null,
            "overflow": null,
            "overflow_x": null,
            "overflow_y": null,
            "padding": null,
            "right": null,
            "top": null,
            "visibility": null,
            "width": null
          }
        },
        "1ee8c10676a14a8d90ee1f3651810355": {
          "model_module": "@jupyter-widgets/controls",
          "model_name": "TextModel",
          "model_module_version": "1.5.0",
          "state": {
            "_dom_classes": [],
            "_model_module": "@jupyter-widgets/controls",
            "_model_module_version": "1.5.0",
            "_model_name": "TextModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/controls",
            "_view_module_version": "1.5.0",
            "_view_name": "TextView",
            "continuous_update": true,
            "description": "Location:",
            "description_tooltip": null,
            "disabled": true,
            "layout": "IPY_MODEL_1f3da9cf06c94b3ca49bb8962a4f23e8",
            "placeholder": "​",
            "style": "IPY_MODEL_2a700cd908cb471cb64ffcb19eaeb63a",
            "value": "Chennai"
          }
        },
        "aa12d17ae00d44558fcf4d03cd25064b": {
          "model_module": "@jupyter-widgets/controls",
          "model_name": "IntSliderModel",
          "model_module_version": "1.5.0",
          "state": {
            "_dom_classes": [],
            "_model_module": "@jupyter-widgets/controls",
            "_model_module_version": "1.5.0",
            "_model_name": "IntSliderModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/controls",
            "_view_module_version": "1.5.0",
            "_view_name": "IntSliderView",
            "continuous_update": true,
            "description": "Hour:",
            "description_tooltip": null,
            "disabled": false,
            "layout": "IPY_MODEL_ab3770801b284d67a0fa3bbcebaa1503",
            "max": 23,
            "min": 0,
            "orientation": "horizontal",
            "readout": true,
            "readout_format": "d",
            "step": 1,
            "style": "IPY_MODEL_318cf93c57eb47e0991276a6994688be",
            "value": 13
          }
        },
        "af663a8aa17d48a2b436733f8cfc1e60": {
          "model_module": "@jupyter-widgets/controls",
          "model_name": "DropdownModel",
          "model_module_version": "1.5.0",
          "state": {
            "_dom_classes": [],
            "_model_module": "@jupyter-widgets/controls",
            "_model_module_version": "1.5.0",
            "_model_name": "DropdownModel",
            "_options_labels": [
              "Monday",
              "Tuesday",
              "Wednesday",
              "Thursday",
              "Friday",
              "Saturday",
              "Sunday"
            ],
            "_view_count": null,
            "_view_module": "@jupyter-widgets/controls",
            "_view_module_version": "1.5.0",
            "_view_name": "DropdownView",
            "description": "Day:",
            "description_tooltip": null,
            "disabled": false,
            "index": 2,
            "layout": "IPY_MODEL_65168686ce964e7f9b46b5c9ad0a6fa5",
            "style": "IPY_MODEL_18116401ede54dc18b81dd29c663420a"
          }
        },
        "d7aeec065c52444ca203a7cb3a33575b": {
          "model_module": "@jupyter-widgets/controls",
          "model_name": "DropdownModel",
          "model_module_version": "1.5.0",
          "state": {
            "_dom_classes": [],
            "_model_module": "@jupyter-widgets/controls",
            "_model_module_version": "1.5.0",
            "_model_name": "DropdownModel",
            "_options_labels": [
              "Route_A",
              "Route_B",
              "Route_C",
              "Route_D",
              "Route_E"
            ],
            "_view_count": null,
            "_view_module": "@jupyter-widgets/controls",
            "_view_module_version": "1.5.0",
            "_view_name": "DropdownView",
            "description": "Route:",
            "description_tooltip": null,
            "disabled": false,
            "index": 2,
            "layout": "IPY_MODEL_058735cf86574348aec261e9b775c0d0",
            "style": "IPY_MODEL_1f368480013d402c92eb9599595ddbb9"
          }
        },
        "fde6384f361c4cf59c1e6362734cfaac": {
          "model_module": "@jupyter-widgets/base",
          "model_name": "LayoutModel",
          "model_module_version": "1.2.0",
          "state": {
            "_model_module": "@jupyter-widgets/base",
            "_model_module_version": "1.2.0",
            "_model_name": "LayoutModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/base",
            "_view_module_version": "1.2.0",
            "_view_name": "LayoutView",
            "align_content": null,
            "align_items": null,
            "align_self": null,
            "border": null,
            "bottom": null,
            "display": null,
            "flex": null,
            "flex_flow": null,
            "grid_area": null,
            "grid_auto_columns": null,
            "grid_auto_flow": null,
            "grid_auto_rows": null,
            "grid_column": null,
            "grid_gap": null,
            "grid_row": null,
            "grid_template_areas": null,
            "grid_template_columns": null,
            "grid_template_rows": null,
            "height": null,
            "justify_content": null,
            "justify_items": null,
            "left": null,
            "margin": null,
            "max_height": null,
            "max_width": null,
            "min_height": null,
            "min_width": null,
            "object_fit": null,
            "object_position": null,
            "order": null,
            "overflow": null,
            "overflow_x": null,
            "overflow_y": null,
            "padding": null,
            "right": null,
            "top": null,
            "visibility": null,
            "width": null
          }
        },
        "b6814d9d5e8a412e8028de50a0f0c863": {
          "model_module": "@jupyter-widgets/controls",
          "model_name": "DropdownModel",
          "model_module_version": "1.5.0",
          "state": {
            "_dom_classes": [],
            "_model_module": "@jupyter-widgets/controls",
            "_model_module_version": "1.5.0",
            "_model_name": "DropdownModel",
            "_options_labels": [
              "Sunny",
              "Cloudy",
              "Rainy",
              "Snowy",
              "Foggy"
            ],
            "_view_count": null,
            "_view_module": "@jupyter-widgets/controls",
            "_view_module_version": "1.5.0",
            "_view_name": "DropdownView",
            "description": "Weather:",
            "description_tooltip": null,
            "disabled": false,
            "index": 0,
            "layout": "IPY_MODEL_9c59bbc809ed4b62bebebd4a7e97f0c6",
            "style": "IPY_MODEL_44580e4fa4674d97ac315ab0f718a536"
          }
        },
        "9998ed87731a4b8f9c141e887a71f51e": {
          "model_module": "@jupyter-widgets/controls",
          "model_name": "FloatSliderModel",
          "model_module_version": "1.5.0",
          "state": {
            "_dom_classes": [],
            "_model_module": "@jupyter-widgets/controls",
            "_model_module_version": "1.5.0",
            "_model_name": "FloatSliderModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/controls",
            "_view_module_version": "1.5.0",
            "_view_name": "FloatSliderView",
            "continuous_update": true,
            "description": "Temp (°C):",
            "description_tooltip": null,
            "disabled": false,
            "layout": "IPY_MODEL_c85a67d483d94c94aa362e18f6290e04",
            "max": 40,
            "min": 20,
            "orientation": "horizontal",
            "readout": true,
            "readout_format": ".2f",
            "step": 0.5,
            "style": "IPY_MODEL_82acbdf009a54c08b0cdec864ae64c8c",
            "value": 30
          }
        },
        "4567b2a7c3154e3cae396de221ea52e1": {
          "model_module": "@jupyter-widgets/controls",
          "model_name": "CheckboxModel",
          "model_module_version": "1.5.0",
          "state": {
            "_dom_classes": [],
            "_model_module": "@jupyter-widgets/controls",
            "_model_module_version": "1.5.0",
            "_model_name": "CheckboxModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/controls",
            "_view_module_version": "1.5.0",
            "_view_name": "CheckboxView",
            "description": "Special Event?",
            "description_tooltip": null,
            "disabled": false,
            "indent": true,
            "layout": "IPY_MODEL_e9b1b63a111a4148a40f5bda3510e25c",
            "style": "IPY_MODEL_8d61a6b7696143a0a19ca5fedfe2bc93",
            "value": false
          }
        },
        "f61abbb25db8461384fe2330c0c475e4": {
          "model_module": "@jupyter-widgets/controls",
          "model_name": "CheckboxModel",
          "model_module_version": "1.5.0",
          "state": {
            "_dom_classes": [],
            "_model_module": "@jupyter-widgets/controls",
            "_model_module_version": "1.5.0",
            "_model_name": "CheckboxModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/controls",
            "_view_module_version": "1.5.0",
            "_view_name": "CheckboxView",
            "description": "Holiday?",
            "description_tooltip": null,
            "disabled": false,
            "indent": true,
            "layout": "IPY_MODEL_14cf8f73b32c4d94ab0bbb7c2fe370a9",
            "style": "IPY_MODEL_7ecbcf902bd448a8838e861711fadf4b",
            "value": false
          }
        },
        "4748b1b7d8a2408c88fe9b2dce449e3d": {
          "model_module": "@jupyter-widgets/controls",
          "model_name": "CheckboxModel",
          "model_module_version": "1.5.0",
          "state": {
            "_dom_classes": [],
            "_model_module": "@jupyter-widgets/controls",
            "_model_module_version": "1.5.0",
            "_model_name": "CheckboxModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/controls",
            "_view_module_version": "1.5.0",
            "_view_name": "CheckboxView",
            "description": "Weekend?",
            "description_tooltip": null,
            "disabled": true,
            "indent": true,
            "layout": "IPY_MODEL_6d9d3d3b70524838a5e068b6394cf54b",
            "style": "IPY_MODEL_13eae16279a4416dab7e652a8c42f1ac",
            "value": false
          }
        },
        "f20533869f6045189b5efef44bc3282e": {
          "model_module": "@jupyter-widgets/base",
          "model_name": "LayoutModel",
          "model_module_version": "1.2.0",
          "state": {
            "_model_module": "@jupyter-widgets/base",
            "_model_module_version": "1.2.0",
            "_model_name": "LayoutModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/base",
            "_view_module_version": "1.2.0",
            "_view_name": "LayoutView",
            "align_content": null,
            "align_items": null,
            "align_self": null,
            "border": null,
            "bottom": null,
            "display": null,
            "flex": null,
            "flex_flow": null,
            "grid_area": null,
            "grid_auto_columns": null,
            "grid_auto_flow": null,
            "grid_auto_rows": null,
            "grid_column": null,
            "grid_gap": null,
            "grid_row": null,
            "grid_template_areas": null,
            "grid_template_columns": null,
            "grid_template_rows": null,
            "height": null,
            "justify_content": null,
            "justify_items": null,
            "left": null,
            "margin": null,
            "max_height": null,
            "max_width": null,
            "min_height": null,
            "min_width": null,
            "object_fit": null,
            "object_position": null,
            "order": null,
            "overflow": null,
            "overflow_x": null,
            "overflow_y": null,
            "padding": null,
            "right": null,
            "top": null,
            "visibility": null,
            "width": null
          }
        },
        "1f3da9cf06c94b3ca49bb8962a4f23e8": {
          "model_module": "@jupyter-widgets/base",
          "model_name": "LayoutModel",
          "model_module_version": "1.2.0",
          "state": {
            "_model_module": "@jupyter-widgets/base",
            "_model_module_version": "1.2.0",
            "_model_name": "LayoutModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/base",
            "_view_module_version": "1.2.0",
            "_view_name": "LayoutView",
            "align_content": null,
            "align_items": null,
            "align_self": null,
            "border": null,
            "bottom": null,
            "display": null,
            "flex": null,
            "flex_flow": null,
            "grid_area": null,
            "grid_auto_columns": null,
            "grid_auto_flow": null,
            "grid_auto_rows": null,
            "grid_column": null,
            "grid_gap": null,
            "grid_row": null,
            "grid_template_areas": null,
            "grid_template_columns": null,
            "grid_template_rows": null,
            "height": null,
            "justify_content": null,
            "justify_items": null,
            "left": null,
            "margin": null,
            "max_height": null,
            "max_width": null,
            "min_height": null,
            "min_width": null,
            "object_fit": null,
            "object_position": null,
            "order": null,
            "overflow": null,
            "overflow_x": null,
            "overflow_y": null,
            "padding": null,
            "right": null,
            "top": null,
            "visibility": null,
            "width": null
          }
        },
        "2a700cd908cb471cb64ffcb19eaeb63a": {
          "model_module": "@jupyter-widgets/controls",
          "model_name": "DescriptionStyleModel",
          "model_module_version": "1.5.0",
          "state": {
            "_model_module": "@jupyter-widgets/controls",
            "_model_module_version": "1.5.0",
            "_model_name": "DescriptionStyleModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/base",
            "_view_module_version": "1.2.0",
            "_view_name": "StyleView",
            "description_width": "initial"
          }
        },
        "ab3770801b284d67a0fa3bbcebaa1503": {
          "model_module": "@jupyter-widgets/base",
          "model_name": "LayoutModel",
          "model_module_version": "1.2.0",
          "state": {
            "_model_module": "@jupyter-widgets/base",
            "_model_module_version": "1.2.0",
            "_model_name": "LayoutModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/base",
            "_view_module_version": "1.2.0",
            "_view_name": "LayoutView",
            "align_content": null,
            "align_items": null,
            "align_self": null,
            "border": null,
            "bottom": null,
            "display": null,
            "flex": null,
            "flex_flow": null,
            "grid_area": null,
            "grid_auto_columns": null,
            "grid_auto_flow": null,
            "grid_auto_rows": null,
            "grid_column": null,
            "grid_gap": null,
            "grid_row": null,
            "grid_template_areas": null,
            "grid_template_columns": null,
            "grid_template_rows": null,
            "height": null,
            "justify_content": null,
            "justify_items": null,
            "left": null,
            "margin": null,
            "max_height": null,
            "max_width": null,
            "min_height": null,
            "min_width": null,
            "object_fit": null,
            "object_position": null,
            "order": null,
            "overflow": null,
            "overflow_x": null,
            "overflow_y": null,
            "padding": null,
            "right": null,
            "top": null,
            "visibility": null,
            "width": null
          }
        },
        "318cf93c57eb47e0991276a6994688be": {
          "model_module": "@jupyter-widgets/controls",
          "model_name": "SliderStyleModel",
          "model_module_version": "1.5.0",
          "state": {
            "_model_module": "@jupyter-widgets/controls",
            "_model_module_version": "1.5.0",
            "_model_name": "SliderStyleModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/base",
            "_view_module_version": "1.2.0",
            "_view_name": "StyleView",
            "description_width": "initial",
            "handle_color": null
          }
        },
        "65168686ce964e7f9b46b5c9ad0a6fa5": {
          "model_module": "@jupyter-widgets/base",
          "model_name": "LayoutModel",
          "model_module_version": "1.2.0",
          "state": {
            "_model_module": "@jupyter-widgets/base",
            "_model_module_version": "1.2.0",
            "_model_name": "LayoutModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/base",
            "_view_module_version": "1.2.0",
            "_view_name": "LayoutView",
            "align_content": null,
            "align_items": null,
            "align_self": null,
            "border": null,
            "bottom": null,
            "display": null,
            "flex": null,
            "flex_flow": null,
            "grid_area": null,
            "grid_auto_columns": null,
            "grid_auto_flow": null,
            "grid_auto_rows": null,
            "grid_column": null,
            "grid_gap": null,
            "grid_row": null,
            "grid_template_areas": null,
            "grid_template_columns": null,
            "grid_template_rows": null,
            "height": null,
            "justify_content": null,
            "justify_items": null,
            "left": null,
            "margin": null,
            "max_height": null,
            "max_width": null,
            "min_height": null,
            "min_width": null,
            "object_fit": null,
            "object_position": null,
            "order": null,
            "overflow": null,
            "overflow_x": null,
            "overflow_y": null,
            "padding": null,
            "right": null,
            "top": null,
            "visibility": null,
            "width": null
          }
        },
        "18116401ede54dc18b81dd29c663420a": {
          "model_module": "@jupyter-widgets/controls",
          "model_name": "DescriptionStyleModel",
          "model_module_version": "1.5.0",
          "state": {
            "_model_module": "@jupyter-widgets/controls",
            "_model_module_version": "1.5.0",
            "_model_name": "DescriptionStyleModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/base",
            "_view_module_version": "1.2.0",
            "_view_name": "StyleView",
            "description_width": "initial"
          }
        },
        "058735cf86574348aec261e9b775c0d0": {
          "model_module": "@jupyter-widgets/base",
          "model_name": "LayoutModel",
          "model_module_version": "1.2.0",
          "state": {
            "_model_module": "@jupyter-widgets/base",
            "_model_module_version": "1.2.0",
            "_model_name": "LayoutModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/base",
            "_view_module_version": "1.2.0",
            "_view_name": "LayoutView",
            "align_content": null,
            "align_items": null,
            "align_self": null,
            "border": null,
            "bottom": null,
            "display": null,
            "flex": null,
            "flex_flow": null,
            "grid_area": null,
            "grid_auto_columns": null,
            "grid_auto_flow": null,
            "grid_auto_rows": null,
            "grid_column": null,
            "grid_gap": null,
            "grid_row": null,
            "grid_template_areas": null,
            "grid_template_columns": null,
            "grid_template_rows": null,
            "height": null,
            "justify_content": null,
            "justify_items": null,
            "left": null,
            "margin": null,
            "max_height": null,
            "max_width": null,
            "min_height": null,
            "min_width": null,
            "object_fit": null,
            "object_position": null,
            "order": null,
            "overflow": null,
            "overflow_x": null,
            "overflow_y": null,
            "padding": null,
            "right": null,
            "top": null,
            "visibility": null,
            "width": null
          }
        },
        "1f368480013d402c92eb9599595ddbb9": {
          "model_module": "@jupyter-widgets/controls",
          "model_name": "DescriptionStyleModel",
          "model_module_version": "1.5.0",
          "state": {
            "_model_module": "@jupyter-widgets/controls",
            "_model_module_version": "1.5.0",
            "_model_name": "DescriptionStyleModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/base",
            "_view_module_version": "1.2.0",
            "_view_name": "StyleView",
            "description_width": "initial"
          }
        },
        "9c59bbc809ed4b62bebebd4a7e97f0c6": {
          "model_module": "@jupyter-widgets/base",
          "model_name": "LayoutModel",
          "model_module_version": "1.2.0",
          "state": {
            "_model_module": "@jupyter-widgets/base",
            "_model_module_version": "1.2.0",
            "_model_name": "LayoutModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/base",
            "_view_module_version": "1.2.0",
            "_view_name": "LayoutView",
            "align_content": null,
            "align_items": null,
            "align_self": null,
            "border": null,
            "bottom": null,
            "display": null,
            "flex": null,
            "flex_flow": null,
            "grid_area": null,
            "grid_auto_columns": null,
            "grid_auto_flow": null,
            "grid_auto_rows": null,
            "grid_column": null,
            "grid_gap": null,
            "grid_row": null,
            "grid_template_areas": null,
            "grid_template_columns": null,
            "grid_template_rows": null,
            "height": null,
            "justify_content": null,
            "justify_items": null,
            "left": null,
            "margin": null,
            "max_height": null,
            "max_width": null,
            "min_height": null,
            "min_width": null,
            "object_fit": null,
            "object_position": null,
            "order": null,
            "overflow": null,
            "overflow_x": null,
            "overflow_y": null,
            "padding": null,
            "right": null,
            "top": null,
            "visibility": null,
            "width": null
          }
        },
        "44580e4fa4674d97ac315ab0f718a536": {
          "model_module": "@jupyter-widgets/controls",
          "model_name": "DescriptionStyleModel",
          "model_module_version": "1.5.0",
          "state": {
            "_model_module": "@jupyter-widgets/controls",
            "_model_module_version": "1.5.0",
            "_model_name": "DescriptionStyleModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/base",
            "_view_module_version": "1.2.0",
            "_view_name": "StyleView",
            "description_width": "initial"
          }
        },
        "c85a67d483d94c94aa362e18f6290e04": {
          "model_module": "@jupyter-widgets/base",
          "model_name": "LayoutModel",
          "model_module_version": "1.2.0",
          "state": {
            "_model_module": "@jupyter-widgets/base",
            "_model_module_version": "1.2.0",
            "_model_name": "LayoutModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/base",
            "_view_module_version": "1.2.0",
            "_view_name": "LayoutView",
            "align_content": null,
            "align_items": null,
            "align_self": null,
            "border": null,
            "bottom": null,
            "display": null,
            "flex": null,
            "flex_flow": null,
            "grid_area": null,
            "grid_auto_columns": null,
            "grid_auto_flow": null,
            "grid_auto_rows": null,
            "grid_column": null,
            "grid_gap": null,
            "grid_row": null,
            "grid_template_areas": null,
            "grid_template_columns": null,
            "grid_template_rows": null,
            "height": null,
            "justify_content": null,
            "justify_items": null,
            "left": null,
            "margin": null,
            "max_height": null,
            "max_width": null,
            "min_height": null,
            "min_width": null,
            "object_fit": null,
            "object_position": null,
            "order": null,
            "overflow": null,
            "overflow_x": null,
            "overflow_y": null,
            "padding": null,
            "right": null,
            "top": null,
            "visibility": null,
            "width": null
          }
        },
        "82acbdf009a54c08b0cdec864ae64c8c": {
          "model_module": "@jupyter-widgets/controls",
          "model_name": "SliderStyleModel",
          "model_module_version": "1.5.0",
          "state": {
            "_model_module": "@jupyter-widgets/controls",
            "_model_module_version": "1.5.0",
            "_model_name": "SliderStyleModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/base",
            "_view_module_version": "1.2.0",
            "_view_name": "StyleView",
            "description_width": "initial",
            "handle_color": null
          }
        },
        "e9b1b63a111a4148a40f5bda3510e25c": {
          "model_module": "@jupyter-widgets/base",
          "model_name": "LayoutModel",
          "model_module_version": "1.2.0",
          "state": {
            "_model_module": "@jupyter-widgets/base",
            "_model_module_version": "1.2.0",
            "_model_name": "LayoutModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/base",
            "_view_module_version": "1.2.0",
            "_view_name": "LayoutView",
            "align_content": null,
            "align_items": null,
            "align_self": null,
            "border": null,
            "bottom": null,
            "display": null,
            "flex": null,
            "flex_flow": null,
            "grid_area": null,
            "grid_auto_columns": null,
            "grid_auto_flow": null,
            "grid_auto_rows": null,
            "grid_column": null,
            "grid_gap": null,
            "grid_row": null,
            "grid_template_areas": null,
            "grid_template_columns": null,
            "grid_template_rows": null,
            "height": null,
            "justify_content": null,
            "justify_items": null,
            "left": null,
            "margin": null,
            "max_height": null,
            "max_width": null,
            "min_height": null,
            "min_width": null,
            "object_fit": null,
            "object_position": null,
            "order": null,
            "overflow": null,
            "overflow_x": null,
            "overflow_y": null,
            "padding": null,
            "right": null,
            "top": null,
            "visibility": null,
            "width": null
          }
        },
        "8d61a6b7696143a0a19ca5fedfe2bc93": {
          "model_module": "@jupyter-widgets/controls",
          "model_name": "DescriptionStyleModel",
          "model_module_version": "1.5.0",
          "state": {
            "_model_module": "@jupyter-widgets/controls",
            "_model_module_version": "1.5.0",
            "_model_name": "DescriptionStyleModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/base",
            "_view_module_version": "1.2.0",
            "_view_name": "StyleView",
            "description_width": "initial"
          }
        },
        "14cf8f73b32c4d94ab0bbb7c2fe370a9": {
          "model_module": "@jupyter-widgets/base",
          "model_name": "LayoutModel",
          "model_module_version": "1.2.0",
          "state": {
            "_model_module": "@jupyter-widgets/base",
            "_model_module_version": "1.2.0",
            "_model_name": "LayoutModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/base",
            "_view_module_version": "1.2.0",
            "_view_name": "LayoutView",
            "align_content": null,
            "align_items": null,
            "align_self": null,
            "border": null,
            "bottom": null,
            "display": null,
            "flex": null,
            "flex_flow": null,
            "grid_area": null,
            "grid_auto_columns": null,
            "grid_auto_flow": null,
            "grid_auto_rows": null,
            "grid_column": null,
            "grid_gap": null,
            "grid_row": null,
            "grid_template_areas": null,
            "grid_template_columns": null,
            "grid_template_rows": null,
            "height": null,
            "justify_content": null,
            "justify_items": null,
            "left": null,
            "margin": null,
            "max_height": null,
            "max_width": null,
            "min_height": null,
            "min_width": null,
            "object_fit": null,
            "object_position": null,
            "order": null,
            "overflow": null,
            "overflow_x": null,
            "overflow_y": null,
            "padding": null,
            "right": null,
            "top": null,
            "visibility": null,
            "width": null
          }
        },
        "7ecbcf902bd448a8838e861711fadf4b": {
          "model_module": "@jupyter-widgets/controls",
          "model_name": "DescriptionStyleModel",
          "model_module_version": "1.5.0",
          "state": {
            "_model_module": "@jupyter-widgets/controls",
            "_model_module_version": "1.5.0",
            "_model_name": "DescriptionStyleModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/base",
            "_view_module_version": "1.2.0",
            "_view_name": "StyleView",
            "description_width": "initial"
          }
        },
        "6d9d3d3b70524838a5e068b6394cf54b": {
          "model_module": "@jupyter-widgets/base",
          "model_name": "LayoutModel",
          "model_module_version": "1.2.0",
          "state": {
            "_model_module": "@jupyter-widgets/base",
            "_model_module_version": "1.2.0",
            "_model_name": "LayoutModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/base",
            "_view_module_version": "1.2.0",
            "_view_name": "LayoutView",
            "align_content": null,
            "align_items": null,
            "align_self": null,
            "border": null,
            "bottom": null,
            "display": null,
            "flex": null,
            "flex_flow": null,
            "grid_area": null,
            "grid_auto_columns": null,
            "grid_auto_flow": null,
            "grid_auto_rows": null,
            "grid_column": null,
            "grid_gap": null,
            "grid_row": null,
            "grid_template_areas": null,
            "grid_template_columns": null,
            "grid_template_rows": null,
            "height": null,
            "justify_content": null,
            "justify_items": null,
            "left": null,
            "margin": null,
            "max_height": null,
            "max_width": null,
            "min_height": null,
            "min_width": null,
            "object_fit": null,
            "object_position": null,
            "order": null,
            "overflow": null,
            "overflow_x": null,
            "overflow_y": null,
            "padding": null,
            "right": null,
            "top": null,
            "visibility": null,
            "width": null
          }
        },
        "13eae16279a4416dab7e652a8c42f1ac": {
          "model_module": "@jupyter-widgets/controls",
          "model_name": "DescriptionStyleModel",
          "model_module_version": "1.5.0",
          "state": {
            "_model_module": "@jupyter-widgets/controls",
            "_model_module_version": "1.5.0",
            "_model_name": "DescriptionStyleModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/base",
            "_view_module_version": "1.2.0",
            "_view_name": "StyleView",
            "description_width": "initial"
          }
        },
        "21ff3b45f95745e7b0b1d9908d2d7462": {
          "model_module": "@jupyter-widgets/controls",
          "model_name": "HBoxModel",
          "model_module_version": "1.5.0",
          "state": {
            "_dom_classes": [],
            "_model_module": "@jupyter-widgets/controls",
            "_model_module_version": "1.5.0",
            "_model_name": "HBoxModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/controls",
            "_view_module_version": "1.5.0",
            "_view_name": "HBoxView",
            "box_style": "",
            "children": [
              "IPY_MODEL_8ad60ec26a1843898beb819c5a333f2f",
              "IPY_MODEL_98d303d174954fabbeaffce26ef8c169"
            ],
            "layout": "IPY_MODEL_f5940462accc424eb45ffd66c215cd20"
          }
        },
        "8ad60ec26a1843898beb819c5a333f2f": {
          "model_module": "@jupyter-widgets/controls",
          "model_name": "ButtonModel",
          "model_module_version": "1.5.0",
          "state": {
            "_dom_classes": [],
            "_model_module": "@jupyter-widgets/controls",
            "_model_module_version": "1.5.0",
            "_model_name": "ButtonModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/controls",
            "_view_module_version": "1.5.0",
            "_view_name": "ButtonView",
            "button_style": "success",
            "description": "Predict Crowd Level",
            "disabled": false,
            "icon": "",
            "layout": "IPY_MODEL_441e364c7f4640469b240f74aefa2483",
            "style": "IPY_MODEL_f53bea5b85744a0b98a1596f9ac7e7ed",
            "tooltip": ""
          }
        },
        "98d303d174954fabbeaffce26ef8c169": {
          "model_module": "@jupyter-widgets/controls",
          "model_name": "ButtonModel",
          "model_module_version": "1.5.0",
          "state": {
            "_dom_classes": [],
            "_model_module": "@jupyter-widgets/controls",
            "_model_module_version": "1.5.0",
            "_model_name": "ButtonModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/controls",
            "_view_module_version": "1.5.0",
            "_view_name": "ButtonView",
            "button_style": "info",
            "description": "Use Real-time Data",
            "disabled": false,
            "icon": "",
            "layout": "IPY_MODEL_53b90c9e893c4fb08cbd1999fae732f7",
            "style": "IPY_MODEL_7484291e343b4cc58d53188da12fecdd",
            "tooltip": ""
          }
        },
        "f5940462accc424eb45ffd66c215cd20": {
          "model_module": "@jupyter-widgets/base",
          "model_name": "LayoutModel",
          "model_module_version": "1.2.0",
          "state": {
            "_model_module": "@jupyter-widgets/base",
            "_model_module_version": "1.2.0",
            "_model_name": "LayoutModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/base",
            "_view_module_version": "1.2.0",
            "_view_name": "LayoutView",
            "align_content": null,
            "align_items": null,
            "align_self": null,
            "border": null,
            "bottom": null,
            "display": null,
            "flex": null,
            "flex_flow": null,
            "grid_area": null,
            "grid_auto_columns": null,
            "grid_auto_flow": null,
            "grid_auto_rows": null,
            "grid_column": null,
            "grid_gap": null,
            "grid_row": null,
            "grid_template_areas": null,
            "grid_template_columns": null,
            "grid_template_rows": null,
            "height": null,
            "justify_content": null,
            "justify_items": null,
            "left": null,
            "margin": null,
            "max_height": null,
            "max_width": null,
            "min_height": null,
            "min_width": null,
            "object_fit": null,
            "object_position": null,
            "order": null,
            "overflow": null,
            "overflow_x": null,
            "overflow_y": null,
            "padding": null,
            "right": null,
            "top": null,
            "visibility": null,
            "width": null
          }
        },
        "441e364c7f4640469b240f74aefa2483": {
          "model_module": "@jupyter-widgets/base",
          "model_name": "LayoutModel",
          "model_module_version": "1.2.0",
          "state": {
            "_model_module": "@jupyter-widgets/base",
            "_model_module_version": "1.2.0",
            "_model_name": "LayoutModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/base",
            "_view_module_version": "1.2.0",
            "_view_name": "LayoutView",
            "align_content": null,
            "align_items": null,
            "align_self": null,
            "border": null,
            "bottom": null,
            "display": null,
            "flex": null,
            "flex_flow": null,
            "grid_area": null,
            "grid_auto_columns": null,
            "grid_auto_flow": null,
            "grid_auto_rows": null,
            "grid_column": null,
            "grid_gap": null,
            "grid_row": null,
            "grid_template_areas": null,
            "grid_template_columns": null,
            "grid_template_rows": null,
            "height": null,
            "justify_content": null,
            "justify_items": null,
            "left": null,
            "margin": null,
            "max_height": null,
            "max_width": null,
            "min_height": null,
            "min_width": null,
            "object_fit": null,
            "object_position": null,
            "order": null,
            "overflow": null,
            "overflow_x": null,
            "overflow_y": null,
            "padding": null,
            "right": null,
            "top": null,
            "visibility": null,
            "width": null
          }
        },
        "f53bea5b85744a0b98a1596f9ac7e7ed": {
          "model_module": "@jupyter-widgets/controls",
          "model_name": "ButtonStyleModel",
          "model_module_version": "1.5.0",
          "state": {
            "_model_module": "@jupyter-widgets/controls",
            "_model_module_version": "1.5.0",
            "_model_name": "ButtonStyleModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/base",
            "_view_module_version": "1.2.0",
            "_view_name": "StyleView",
            "button_color": null,
            "font_weight": ""
          }
        },
        "53b90c9e893c4fb08cbd1999fae732f7": {
          "model_module": "@jupyter-widgets/base",
          "model_name": "LayoutModel",
          "model_module_version": "1.2.0",
          "state": {
            "_model_module": "@jupyter-widgets/base",
            "_model_module_version": "1.2.0",
            "_model_name": "LayoutModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/base",
            "_view_module_version": "1.2.0",
            "_view_name": "LayoutView",
            "align_content": null,
            "align_items": null,
            "align_self": null,
            "border": null,
            "bottom": null,
            "display": null,
            "flex": null,
            "flex_flow": null,
            "grid_area": null,
            "grid_auto_columns": null,
            "grid_auto_flow": null,
            "grid_auto_rows": null,
            "grid_column": null,
            "grid_gap": null,
            "grid_row": null,
            "grid_template_areas": null,
            "grid_template_columns": null,
            "grid_template_rows": null,
            "height": null,
            "justify_content": null,
            "justify_items": null,
            "left": null,
            "margin": null,
            "max_height": null,
            "max_width": null,
            "min_height": null,
            "min_width": null,
            "object_fit": null,
            "object_position": null,
            "order": null,
            "overflow": null,
            "overflow_x": null,
            "overflow_y": null,
            "padding": null,
            "right": null,
            "top": null,
            "visibility": null,
            "width": null
          }
        },
        "7484291e343b4cc58d53188da12fecdd": {
          "model_module": "@jupyter-widgets/controls",
          "model_name": "ButtonStyleModel",
          "model_module_version": "1.5.0",
          "state": {
            "_model_module": "@jupyter-widgets/controls",
            "_model_module_version": "1.5.0",
            "_model_name": "ButtonStyleModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/base",
            "_view_module_version": "1.2.0",
            "_view_name": "StyleView",
            "button_color": null,
            "font_weight": ""
          }
        },
        "889aa8873ebc4fd4ab6343bd177bedef": {
          "model_module": "@jupyter-widgets/output",
          "model_name": "OutputModel",
          "model_module_version": "1.0.0",
          "state": {
            "_dom_classes": [],
            "_model_module": "@jupyter-widgets/output",
            "_model_module_version": "1.0.0",
            "_model_name": "OutputModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/output",
            "_view_module_version": "1.0.0",
            "_view_name": "OutputView",
            "layout": "IPY_MODEL_99be53c01d4149239894876f3c3ae24a",
            "msg_id": "",
            "outputs": [
              {
                "output_type": "stream",
                "name": "stdout",
                "text": [
                  "🚦 Predicted Crowd Level: HIGH\n",
                  "\n",
                  "📍 Location: Chennai\n",
                  "🚆 Route: Route_C\n",
                  "⏰ Time: 13:00\n",
                  "📅 Day: Wednesday\n",
                  "🌡️ Temperature: 30.0°C\n",
                  "🌤️ Weather: Sunny\n",
                  "🏖️ Weekend: No\n",
                  "🎉 Holiday: No\n",
                  "🎭 Special Event: No\n",
                  "\n",
                  "Probabilities for each crowd level:\n",
                  "High: 0.47\n",
                  "Low: 0.02\n",
                  "Medium: 0.29\n",
                  "Very High: 0.22\n"
                ]
              },
              {
                "output_type": "display_data",
                "data": {
                  "text/plain": "<Figure size 800x400 with 1 Axes>",
                  "image/png": "\n"
                },
                "metadata": {}
              }
            ]
          }
        },
        "99be53c01d4149239894876f3c3ae24a": {
          "model_module": "@jupyter-widgets/base",
          "model_name": "LayoutModel",
          "model_module_version": "1.2.0",
          "state": {
            "_model_module": "@jupyter-widgets/base",
            "_model_module_version": "1.2.0",
            "_model_name": "LayoutModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/base",
            "_view_module_version": "1.2.0",
            "_view_name": "LayoutView",
            "align_content": null,
            "align_items": null,
            "align_self": null,
            "border": null,
            "bottom": null,
            "display": null,
            "flex": null,
            "flex_flow": null,
            "grid_area": null,
            "grid_auto_columns": null,
            "grid_auto_flow": null,
            "grid_auto_rows": null,
            "grid_column": null,
            "grid_gap": null,
            "grid_row": null,
            "grid_template_areas": null,
            "grid_template_columns": null,
            "grid_template_rows": null,
            "height": null,
            "justify_content": null,
            "justify_items": null,
            "left": null,
            "margin": null,
            "max_height": null,
            "max_width": null,
            "min_height": null,
            "min_width": null,
            "object_fit": null,
            "object_position": null,
            "order": null,
            "overflow": null,
            "overflow_x": null,
            "overflow_y": null,
            "padding": null,
            "right": null,
            "top": null,
            "visibility": null,
            "width": null
          }
        },
        "fdb689d7426a47358fe18a59ac8d39fa": {
          "model_module": "@jupyter-widgets/controls",
          "model_name": "ButtonModel",
          "model_module_version": "1.5.0",
          "state": {
            "_dom_classes": [],
            "_model_module": "@jupyter-widgets/controls",
            "_model_module_version": "1.5.0",
            "_model_name": "ButtonModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/controls",
            "_view_module_version": "1.5.0",
            "_view_name": "ButtonView",
            "button_style": "success",
            "description": "Get Current Time Prediction",
            "disabled": false,
            "icon": "clock",
            "layout": "IPY_MODEL_407b6b11c7ca44bfa372663f040d461d",
            "style": "IPY_MODEL_9375a4c8bb794a18bc85232f1d76d831",
            "tooltip": ""
          }
        },
        "407b6b11c7ca44bfa372663f040d461d": {
          "model_module": "@jupyter-widgets/base",
          "model_name": "LayoutModel",
          "model_module_version": "1.2.0",
          "state": {
            "_model_module": "@jupyter-widgets/base",
            "_model_module_version": "1.2.0",
            "_model_name": "LayoutModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/base",
            "_view_module_version": "1.2.0",
            "_view_name": "LayoutView",
            "align_content": null,
            "align_items": null,
            "align_self": null,
            "border": null,
            "bottom": null,
            "display": null,
            "flex": null,
            "flex_flow": null,
            "grid_area": null,
            "grid_auto_columns": null,
            "grid_auto_flow": null,
            "grid_auto_rows": null,
            "grid_column": null,
            "grid_gap": null,
            "grid_row": null,
            "grid_template_areas": null,
            "grid_template_columns": null,
            "grid_template_rows": null,
            "height": null,
            "justify_content": null,
            "justify_items": null,
            "left": null,
            "margin": null,
            "max_height": null,
            "max_width": null,
            "min_height": null,
            "min_width": null,
            "object_fit": null,
            "object_position": null,
            "order": null,
            "overflow": null,
            "overflow_x": null,
            "overflow_y": null,
            "padding": null,
            "right": null,
            "top": null,
            "visibility": null,
            "width": null
          }
        },
        "9375a4c8bb794a18bc85232f1d76d831": {
          "model_module": "@jupyter-widgets/controls",
          "model_name": "ButtonStyleModel",
          "model_module_version": "1.5.0",
          "state": {
            "_model_module": "@jupyter-widgets/controls",
            "_model_module_version": "1.5.0",
            "_model_name": "ButtonStyleModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/base",
            "_view_module_version": "1.2.0",
            "_view_name": "StyleView",
            "button_color": null,
            "font_weight": ""
          }
        },
        "1e685fcc044c4becbed1c9d753346e5b": {
          "model_module": "@jupyter-widgets/controls",
          "model_name": "ButtonModel",
          "model_module_version": "1.5.0",
          "state": {
            "_dom_classes": [],
            "_model_module": "@jupyter-widgets/controls",
            "_model_module_version": "1.5.0",
            "_model_name": "ButtonModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/controls",
            "_view_module_version": "1.5.0",
            "_view_name": "ButtonView",
            "button_style": "primary",
            "description": "Real-time Dashboard",
            "disabled": false,
            "icon": "dashboard",
            "layout": "IPY_MODEL_b8ca9cf885834a3b987160b9bbb85570",
            "style": "IPY_MODEL_8d765816944548b88280dca4184b7f61",
            "tooltip": ""
          }
        },
        "b8ca9cf885834a3b987160b9bbb85570": {
          "model_module": "@jupyter-widgets/base",
          "model_name": "LayoutModel",
          "model_module_version": "1.2.0",
          "state": {
            "_model_module": "@jupyter-widgets/base",
            "_model_module_version": "1.2.0",
            "_model_name": "LayoutModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/base",
            "_view_module_version": "1.2.0",
            "_view_name": "LayoutView",
            "align_content": null,
            "align_items": null,
            "align_self": null,
            "border": null,
            "bottom": null,
            "display": null,
            "flex": null,
            "flex_flow": null,
            "grid_area": null,
            "grid_auto_columns": null,
            "grid_auto_flow": null,
            "grid_auto_rows": null,
            "grid_column": null,
            "grid_gap": null,
            "grid_row": null,
            "grid_template_areas": null,
            "grid_template_columns": null,
            "grid_template_rows": null,
            "height": null,
            "justify_content": null,
            "justify_items": null,
            "left": null,
            "margin": null,
            "max_height": null,
            "max_width": null,
            "min_height": null,
            "min_width": null,
            "object_fit": null,
            "object_position": null,
            "order": null,
            "overflow": null,
            "overflow_x": null,
            "overflow_y": null,
            "padding": null,
            "right": null,
            "top": null,
            "visibility": null,
            "width": null
          }
        },
        "8d765816944548b88280dca4184b7f61": {
          "model_module": "@jupyter-widgets/controls",
          "model_name": "ButtonStyleModel",
          "model_module_version": "1.5.0",
          "state": {
            "_model_module": "@jupyter-widgets/controls",
            "_model_module_version": "1.5.0",
            "_model_name": "ButtonStyleModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/base",
            "_view_module_version": "1.2.0",
            "_view_name": "StyleView",
            "button_color": null,
            "font_weight": ""
          }
        },
        "39ea7233ff5f48dda544706159c87f69": {
          "model_module": "@jupyter-widgets/controls",
          "model_name": "ButtonModel",
          "model_module_version": "1.5.0",
          "state": {
            "_dom_classes": [],
            "_model_module": "@jupyter-widgets/controls",
            "_model_module_version": "1.5.0",
            "_model_name": "ButtonModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/controls",
            "_view_module_version": "1.5.0",
            "_view_name": "ButtonView",
            "button_style": "warning",
            "description": "Run Simulation",
            "disabled": false,
            "icon": "",
            "layout": "IPY_MODEL_30e6267465954958b2540a6e834faddf",
            "style": "IPY_MODEL_d0b8305b445f4eeda170549ea5fb3acf",
            "tooltip": ""
          }
        },
        "30e6267465954958b2540a6e834faddf": {
          "model_module": "@jupyter-widgets/base",
          "model_name": "LayoutModel",
          "model_module_version": "1.2.0",
          "state": {
            "_model_module": "@jupyter-widgets/base",
            "_model_module_version": "1.2.0",
            "_model_name": "LayoutModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/base",
            "_view_module_version": "1.2.0",
            "_view_name": "LayoutView",
            "align_content": null,
            "align_items": null,
            "align_self": null,
            "border": null,
            "bottom": null,
            "display": null,
            "flex": null,
            "flex_flow": null,
            "grid_area": null,
            "grid_auto_columns": null,
            "grid_auto_flow": null,
            "grid_auto_rows": null,
            "grid_column": null,
            "grid_gap": null,
            "grid_row": null,
            "grid_template_areas": null,
            "grid_template_columns": null,
            "grid_template_rows": null,
            "height": null,
            "justify_content": null,
            "justify_items": null,
            "left": null,
            "margin": null,
            "max_height": null,
            "max_width": null,
            "min_height": null,
            "min_width": null,
            "object_fit": null,
            "object_position": null,
            "order": null,
            "overflow": null,
            "overflow_x": null,
            "overflow_y": null,
            "padding": null,
            "right": null,
            "top": null,
            "visibility": null,
            "width": null
          }
        },
        "d0b8305b445f4eeda170549ea5fb3acf": {
          "model_module": "@jupyter-widgets/controls",
          "model_name": "ButtonStyleModel",
          "model_module_version": "1.5.0",
          "state": {
            "_model_module": "@jupyter-widgets/controls",
            "_model_module_version": "1.5.0",
            "_model_name": "ButtonStyleModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/base",
            "_view_module_version": "1.2.0",
            "_view_name": "StyleView",
            "button_color": null,
            "font_weight": ""
          }
        },
        "39982b3e4d1b4cdea29023a830664c9c": {
          "model_module": "@jupyter-widgets/controls",
          "model_name": "ButtonModel",
          "model_module_version": "1.5.0",
          "state": {
            "_dom_classes": [],
            "_model_module": "@jupyter-widgets/controls",
            "_model_module_version": "1.5.0",
            "_model_name": "ButtonModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/controls",
            "_view_module_version": "1.5.0",
            "_view_name": "ButtonView",
            "button_style": "info",
            "description": "Auto-update Dashboard",
            "disabled": false,
            "icon": "",
            "layout": "IPY_MODEL_bd203c88337e411c83128a84479b2a7c",
            "style": "IPY_MODEL_2ab9b55847564cd692eecc82c40542c2",
            "tooltip": ""
          }
        },
        "bd203c88337e411c83128a84479b2a7c": {
          "model_module": "@jupyter-widgets/base",
          "model_name": "LayoutModel",
          "model_module_version": "1.2.0",
          "state": {
            "_model_module": "@jupyter-widgets/base",
            "_model_module_version": "1.2.0",
            "_model_name": "LayoutModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/base",
            "_view_module_version": "1.2.0",
            "_view_name": "LayoutView",
            "align_content": null,
            "align_items": null,
            "align_self": null,
            "border": null,
            "bottom": null,
            "display": null,
            "flex": null,
            "flex_flow": null,
            "grid_area": null,
            "grid_auto_columns": null,
            "grid_auto_flow": null,
            "grid_auto_rows": null,
            "grid_column": null,
            "grid_gap": null,
            "grid_row": null,
            "grid_template_areas": null,
            "grid_template_columns": null,
            "grid_template_rows": null,
            "height": null,
            "justify_content": null,
            "justify_items": null,
            "left": null,
            "margin": null,
            "max_height": null,
            "max_width": null,
            "min_height": null,
            "min_width": null,
            "object_fit": null,
            "object_position": null,
            "order": null,
            "overflow": null,
            "overflow_x": null,
            "overflow_y": null,
            "padding": null,
            "right": null,
            "top": null,
            "visibility": null,
            "width": null
          }
        },
        "2ab9b55847564cd692eecc82c40542c2": {
          "model_module": "@jupyter-widgets/controls",
          "model_name": "ButtonStyleModel",
          "model_module_version": "1.5.0",
          "state": {
            "_model_module": "@jupyter-widgets/controls",
            "_model_module_version": "1.5.0",
            "_model_name": "ButtonStyleModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/base",
            "_view_module_version": "1.2.0",
            "_view_name": "StyleView",
            "button_color": null,
            "font_weight": ""
          }
        }
      }
    }
  },
  "cells": [
    {
      "cell_type": "code",
      "source": [
        "!pip install requests"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "8mLaL_s1FEgo",
        "outputId": "c06b1935-b165-489c-d364-f0144ebbcbb0"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Requirement already satisfied: requests in /usr/local/lib/python3.11/dist-packages (2.32.3)\n",
            "Requirement already satisfied: charset-normalizer<4,>=2 in /usr/local/lib/python3.11/dist-packages (from requests) (3.4.1)\n",
            "Requirement already satisfied: idna<4,>=2.5 in /usr/local/lib/python3.11/dist-packages (from requests) (3.10)\n",
            "Requirement already satisfied: urllib3<3,>=1.21.1 in /usr/local/lib/python3.11/dist-packages (from requests) (2.3.0)\n",
            "Requirement already satisfied: certifi>=2017.4.17 in /usr/local/lib/python3.11/dist-packages (from requests) (2025.1.31)\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "import pandas as pd\n",
        "import numpy as np\n",
        "import matplotlib.pyplot as plt\n",
        "import seaborn as sns\n",
        "from datetime import datetime, timedelta\n",
        "from sklearn.model_selection import train_test_split\n",
        "from sklearn.ensemble import RandomForestClassifier\n",
        "from sklearn.preprocessing import LabelEncoder\n",
        "from sklearn.metrics import accuracy_score, classification_report, confusion_matrix\n",
        "import ipywidgets as widgets\n",
        "from IPython.display import display, clear_output\n",
        "import requests\n",
        "import json\n",
        "import time\n",
        "import joblib\n",
        "import warnings\n",
        "warnings.filterwarnings('ignore')\n",
        "\n",
        "# Set style for visualizations\n",
        "sns.set_style(\"whitegrid\")\n",
        "plt.style.use('ggplot')\n",
        "\n",
        "# Set random seed for reproducibility\n",
        "np.random.seed(42)\n"
      ],
      "metadata": {
        "id": "VPQd10c6FHm8"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "def get_real_weather_data(location=\"Chennai\"):\n",
        "    \"\"\"\n",
        "    Get actual weather data from OpenWeatherMap API\n",
        "\n",
        "    Parameters:\n",
        "    - location: City name (defaults to Chennai)\n",
        "\n",
        "    Returns:\n",
        "    - Dictionary with weather information\n",
        "    \"\"\"\n",
        "    # Replace with your actual API key from OpenWeatherMap\n",
        "    # Get free API key at: https://openweathermap.org/api\n",
        "    WEATHER_API_KEY = \"5ba40b1b96b25bf6ffd7e7cd4a919cc5\"\n",
        "\n",
        "    weather_url = f\"https://api.openweathermap.org/data/2.5/weather?q={location}&appid={WEATHER_API_KEY}&units=metric\"\n",
        "\n",
        "    try:\n",
        "        weather_response = requests.get(weather_url)\n",
        "        weather_data = weather_response.json()\n",
        "\n",
        "        # Extract weather information\n",
        "        temperature = weather_data['main']['temp']\n",
        "        weather_condition = weather_data['weather'][0]['main']  # Clear, Clouds, Rain, etc.\n",
        "\n",
        "        # Map OpenWeatherMap conditions to our categories\n",
        "        weather_mapping = {\n",
        "            'Clear': 'Sunny',\n",
        "            'Clouds': 'Cloudy',\n",
        "            'Rain': 'Rainy',\n",
        "            'Drizzle': 'Rainy',\n",
        "            'Thunderstorm': 'Rainy',\n",
        "            'Snow': 'Snowy',\n",
        "            'Mist': 'Foggy',\n",
        "            'Fog': 'Foggy',\n",
        "            'Haze': 'Foggy'\n",
        "        }\n",
        "\n",
        "        # Default to the original if not in mapping\n",
        "        weather = weather_mapping.get(weather_condition, weather_condition)\n",
        "\n",
        "        print(f\"✅ Successfully fetched weather data: {temperature}°C, {weather}\")\n",
        "\n",
        "        return {\n",
        "            'temperature': temperature,\n",
        "            'weather': weather,\n",
        "            'humidity': weather_data['main']['humidity'],\n",
        "            'wind_speed': weather_data['wind']['speed']\n",
        "        }\n",
        "\n",
        "    except Exception as e:\n",
        "        print(f\"❌ Error fetching weather data: {e}\")\n",
        "        # Return default values if API fails\n",
        "        return {\n",
        "            'temperature': 30,  # Average Chennai temperature\n",
        "            'weather': 'Sunny',\n",
        "            'humidity': 70,\n",
        "            'wind_speed': 5\n",
        "        }\n",
        "\n",
        "def is_today_holiday(country_code=\"IN\"):\n",
        "    \"\"\"\n",
        "    Check if today is a public holiday using Nager.Date API\n",
        "\n",
        "    Parameters:\n",
        "    - country_code: Two-letter country code (default: IN for India)\n",
        "\n",
        "    Returns:\n",
        "    - Boolean indicating if today is a holiday\n",
        "    \"\"\"\n",
        "    try:\n",
        "        holiday_url = f\"https://date.nager.at/api/v3/IsTodayPublicHoliday/{country_code}\"\n",
        "        holiday_response = requests.get(holiday_url)\n",
        "        is_holiday = holiday_response.status_code == 200  # Returns 200 if today is a holiday\n",
        "\n",
        "        if is_holiday:\n",
        "            print(\"✅ Today is a public holiday\")\n",
        "        else:\n",
        "            print(\"✅ Today is not a public holiday\")\n",
        "\n",
        "        return is_holiday\n",
        "    except Exception as e:\n",
        "        print(f\"❌ Error checking holiday status: {e}\")\n",
        "        return False\n",
        "\n",
        "def get_events_data(city=\"Chennai\"):\n",
        "    \"\"\"\n",
        "    Get special events happening today near transit hubs using Ticketmaster API\n",
        "\n",
        "    Parameters:\n",
        "    - city: City name (defaults to Chennai)\n",
        "\n",
        "    Returns:\n",
        "    - List of events\n",
        "    \"\"\"\n",
        "    # Replace with your actual API key from Ticketmaster\n",
        "    # Get free API key at: https://developer.ticketmaster.com/\n",
        "    TICKETMASTER_API_KEY = \"ndgJAuEEQFE3Co17kBl5jADxDhzxHzM4\"\n",
        "\n",
        "    try:\n",
        "        # Get today's date in the required format\n",
        "        today = datetime.now().strftime(\"%Y-%m-%dT%H:%M:%SZ\")\n",
        "\n",
        "        url = f\"https://app.ticketmaster.com/discovery/v2/events.json?city={city}&startDateTime={today}&apikey={TICKETMASTER_API_KEY}\"\n",
        "        response = requests.get(url)\n",
        "        data = response.json()\n",
        "\n",
        "        events = []\n",
        "        if '_embedded' in data and 'events' in data['_embedded']:\n",
        "            for event in data['_embedded']['events']:\n",
        "                venue_name = event['_embedded']['venues'][0]['name'] if '_embedded' in event and 'venues' in event['_embedded'] else 'Unknown venue'\n",
        "\n",
        "                events.append({\n",
        "                    'name': event['name'],\n",
        "                    'venue': venue_name,\n",
        "                    'start_time': event['dates']['start']['dateTime'] if 'dateTime' in event['dates']['start'] else 'Unknown time'\n",
        "                })\n",
        "\n",
        "            print(f\"✅ Found {len(events)} events in {city} today\")\n",
        "        else:\n",
        "            print(f\"✅ No events found in {city} today\")\n",
        "\n",
        "        return events\n",
        "    except Exception as e:\n",
        "        print(f\"❌ Error fetching events data: {e}\")\n",
        "        return []\n",
        "\n",
        "def get_realtime_data(location=\"Chennai\"):\n",
        "    \"\"\"\n",
        "    Get all real-time data from various APIs\n",
        "\n",
        "    Parameters:\n",
        "    - location: City name (defaults to Chennai)\n",
        "\n",
        "    Returns:\n",
        "    - Dictionary with all real-time data\n",
        "    \"\"\"\n",
        "    # Get current date and time from system\n",
        "    now = datetime.now()\n",
        "\n",
        "    # Get weather data\n",
        "    weather_data = get_real_weather_data(location)\n",
        "\n",
        "    # Check if today is a holiday\n",
        "    is_holiday = is_today_holiday(country_code=\"IN\")\n",
        "\n",
        "    # Get day info\n",
        "    day = ['Monday', 'Tuesday', 'Wednesday', 'Thursday', 'Friday', 'Saturday', 'Sunday'][now.weekday()]\n",
        "    is_weekend = 1 if day in ['Saturday', 'Sunday'] else 0\n",
        "\n",
        "    # Get events data\n",
        "    events = get_events_data(location)\n",
        "    has_event = 1 if len(events) > 0 else 0\n",
        "\n",
        "    # Return comprehensive data dictionary\n",
        "    return {\n",
        "        'datetime': now,\n",
        "        'hour': now.hour,\n",
        "        'minute': now.minute,\n",
        "        'day_of_week': day,\n",
        "        'month': now.month,\n",
        "        'weather': weather_data['weather'],\n",
        "        'temperature': weather_data['temperature'],\n",
        "        'humidity': weather_data.get('humidity', 70),\n",
        "        'wind_speed': weather_data.get('wind_speed', 5),\n",
        "        'is_holiday': int(is_holiday),\n",
        "        'is_weekend': is_weekend,\n",
        "        'has_event': has_event,\n",
        "        'events': events\n",
        "    }\n"
      ],
      "metadata": {
        "id": "zOUCEUFBFKNj"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "print(\"🌍 Testing real-time data integration for Chennai...\")\n",
        "location = \"Chennai\"  # Fixed to Chennai\n",
        "live_data = get_realtime_data(location)\n",
        "\n",
        "print(\"\\n📊 Summary of real-time data:\")\n",
        "print(f\"📅 Date & Time: {live_data['datetime']}\")\n",
        "print(f\"🌡️ Temperature: {live_data['temperature']}°C\")\n",
        "print(f\"🌤️ Weather: {live_data['weather']}\")\n",
        "print(f\"📆 Day: {live_data['day_of_week']}\")\n",
        "print(f\"🏖️ Weekend: {'Yes' if live_data['is_weekend'] == 1 else 'No'}\")\n",
        "print(f\"🎉 Holiday: {'Yes' if live_data['is_holiday'] == 1 else 'No'}\")\n",
        "print(f\"🎭 Events today: {'Yes' if live_data['has_event'] == 1 else 'No'}\")\n",
        "\n",
        "if live_data['has_event'] == 1:\n",
        "    print(\"\\n🎫 Today's events in Chennai:\")\n",
        "    for i, event in enumerate(live_data['events'], 1):\n",
        "        print(f\"  {i}. {event['name']} at {event['venue']}\")\n"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "gST2yTi3FSxp",
        "outputId": "5ff447b6-2458-4f7e-8328-b4d13a99157f"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "🌍 Testing real-time data integration for Chennai...\n",
            "✅ Successfully fetched weather data: 28.99°C, Sunny\n",
            "✅ Today is not a public holiday\n",
            "✅ No events found in Chennai today\n",
            "\n",
            "📊 Summary of real-time data:\n",
            "📅 Date & Time: 2025-04-16 13:47:36.274990\n",
            "🌡️ Temperature: 28.99°C\n",
            "🌤️ Weather: Sunny\n",
            "📆 Day: Wednesday\n",
            "🏖️ Weekend: No\n",
            "🎉 Holiday: No\n",
            "🎭 Events today: No\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "class TrainingDataGenerator:\n",
        "    def __init__(self):\n",
        "        \"\"\"Initialize the training data generator\"\"\"\n",
        "        # Define routes\n",
        "        self.routes = ['Route_A', 'Route_B', 'Route_C', 'Route_D', 'Route_E']\n",
        "\n",
        "        # Define days of week\n",
        "        self.days = ['Monday', 'Tuesday', 'Wednesday', 'Thursday', 'Friday', 'Saturday', 'Sunday']\n",
        "\n",
        "        # Define weather conditions\n",
        "        self.weather_conditions = ['Sunny', 'Cloudy', 'Rainy', 'Snowy', 'Foggy']\n",
        "\n",
        "        # Define crowd levels\n",
        "        self.crowd_levels = ['Low', 'Medium', 'High', 'Very High']\n",
        "\n",
        "        # Define seasons and their temperature ranges (Chennai has mostly hot weather)\n",
        "        self.seasons = {\n",
        "            'Winter': (20, 30),   # Cooler season in Chennai\n",
        "            'Spring': (25, 35),\n",
        "            'Summer': (30, 40),   # Hot season in Chennai\n",
        "            'Fall': (25, 35)\n",
        "        }\n",
        "\n",
        "        # Define holidays\n",
        "        self.holidays = [\n",
        "            '01-01',  # New Year\n",
        "            '01-15',  # Pongal\n",
        "            '01-26',  # Republic Day\n",
        "            '08-15',  # Independence Day\n",
        "            '10-02',  # Gandhi Jayanti\n",
        "            '11-04',  # Diwali (approximate)\n",
        "            '12-25',  # Christmas\n",
        "            # Add more holidays as needed\n",
        "        ]\n",
        "\n",
        "        # Special events that can affect crowd levels\n",
        "        self.special_events = [\n",
        "            {'name': 'Cricket Match', 'routes': ['Route_A', 'Route_C'], 'crowd_factor': 1.8},\n",
        "            {'name': 'Music Concert', 'routes': ['Route_B', 'Route_E'], 'crowd_factor': 2.0},\n",
        "            {'name': 'Festival', 'routes': ['Route_A', 'Route_D'], 'crowd_factor': 2.2},\n",
        "            {'name': 'Tech Conference', 'routes': ['Route_C'], 'crowd_factor': 1.5}\n",
        "        ]\n",
        "\n",
        "    def get_season(self, date):\n",
        "        \"\"\"Determine season based on month\"\"\"\n",
        "        month = date.month\n",
        "        if month in [12, 1, 2]:\n",
        "            return 'Winter'\n",
        "        elif month in [3, 4, 5]:\n",
        "            return 'Spring'\n",
        "        elif month in [6, 7, 8]:\n",
        "            return 'Summer'\n",
        "        else:\n",
        "            return 'Fall'\n",
        "\n",
        "    def is_holiday(self, date):\n",
        "        \"\"\"Check if date is a holiday\"\"\"\n",
        "        date_str = date.strftime('%m-%d')\n",
        "        return date_str in self.holidays\n",
        "\n",
        "    def get_active_events(self, date, route):\n",
        "        \"\"\"Check for any special events on this date affecting this route\"\"\"\n",
        "        # In real system, this would check a database or API\n",
        "        # For simulation, randomly activate events with 10% probability\n",
        "        active_events = []\n",
        "        for event in self.special_events:\n",
        "            if route in event['routes'] and np.random.random() < 0.1:\n",
        "                active_events.append(event)\n",
        "        return active_events\n",
        "\n",
        "    def get_temperature(self, date, hour):\n",
        "        \"\"\"Generate realistic temperature based on season and time of day\"\"\"\n",
        "        # Chennai specific - typically hot but with seasonal variations\n",
        "        season = self.get_season(date)\n",
        "        min_temp, max_temp = self.seasons[season]\n",
        "\n",
        "        # Add time-of-day variation (cooler at night, warmer during day)\n",
        "        time_factor = np.sin(np.pi * hour / 24)  # Peaks at noon\n",
        "        daily_range = (max_temp - min_temp) * 0.5\n",
        "\n",
        "        base_temp = min_temp + (max_temp - min_temp) * 0.5  # Base temperature\n",
        "        temp = base_temp + time_factor * daily_range\n",
        "\n",
        "        # Add random variation\n",
        "        temp += np.random.normal(0, 2)  # Random noise\n",
        "\n",
        "        return round(temp, 1)\n",
        "\n",
        "    def get_weather(self, date, temperature):\n",
        "        \"\"\"Generate weather condition based on season and temperature\"\"\"\n",
        "        # Chennai specific - more rain during monsoon season (Oct-Dec)\n",
        "        month = date.month\n",
        "\n",
        "        # Weather probabilities change based on season and temperature\n",
        "        if month in [10, 11, 12]:  # Monsoon season\n",
        "            probs = [0.3, 0.3, 0.35, 0.0, 0.05]  # Higher chance of rain\n",
        "        elif temperature > 35:\n",
        "            probs = [0.8, 0.15, 0.05, 0.0, 0.0]  # Very hot days are mostly sunny\n",
        "        else:\n",
        "            probs = [0.6, 0.25, 0.1, 0.0, 0.05]  # Default probabilities for Chennai\n",
        "\n",
        "        return np.random.choice(self.weather_conditions, p=probs)\n",
        "\n",
        "    def generate_crowd_level(self, hour, day, route, weather, temperature, date):\n",
        "        \"\"\"\n",
        "        Generate crowd level based on all factors\n",
        "        This is our \"ground truth\" simulator for training data\n",
        "        \"\"\"\n",
        "        is_weekend = day in ['Saturday', 'Sunday']\n",
        "        is_holiday = self.is_holiday(date)\n",
        "        events = self.get_active_events(date, route)\n",
        "\n",
        "        # Base crowd level\n",
        "        crowd_factor = 0.0\n",
        "\n",
        "        # Time of day effect (rush hours)\n",
        "        if 7 <= hour <= 10:  # Morning rush - Chennai specific\n",
        "            crowd_factor += 0.7\n",
        "        elif 17 <= hour <= 20:  # Evening rush - Chennai specific\n",
        "            crowd_factor += 0.8\n",
        "        elif 11 <= hour <= 14:  # Lunch time\n",
        "            crowd_factor += 0.4\n",
        "        elif hour >= 22 or hour <= 5:  # Late night\n",
        "            crowd_factor -= 0.3\n",
        "\n",
        "        # Day effect\n",
        "        if is_weekend:\n",
        "            crowd_factor -= 0.2  # Usually less crowded on weekends during commute hours\n",
        "            if 10 <= hour <= 20:  # But can be busy during shopping hours\n",
        "                crowd_factor += 0.3\n",
        "        elif day in ['Monday', 'Friday']:\n",
        "            crowd_factor += 0.1  # Slightly more travel on Monday/Friday\n",
        "\n",
        "        # Weather effect\n",
        "        if weather == 'Rainy':\n",
        "            crowd_factor += 0.3  # More people take transit when raining in Chennai\n",
        "        elif weather == 'Sunny' and temperature > 35:\n",
        "            crowd_factor += 0.2  # Very hot days increase transit use in Chennai\n",
        "\n",
        "        # Temperature effect\n",
        "        if temperature > 38:\n",
        "            crowd_factor += 0.2  # Extreme heat increases transit use\n",
        "\n",
        "        # Holiday effect\n",
        "        if is_holiday:\n",
        "            crowd_factor -= 0.4  # Less commuting on holidays\n",
        "\n",
        "        # Route effect (some routes naturally busier)\n",
        "        if route == 'Route_A':\n",
        "            crowd_factor += 0.2\n",
        "        elif route == 'Route_B':\n",
        "            crowd_factor += 0.1\n",
        "\n",
        "        # Special events effect\n",
        "        for event in events:\n",
        "            crowd_factor += (event['crowd_factor'] - 1.0)\n",
        "\n",
        "        # Convert factor to crowd level\n",
        "        if crowd_factor < 0.2:\n",
        "            return 'Low'\n",
        "        elif crowd_factor < 0.5:\n",
        "            return 'Medium'\n",
        "        elif crowd_factor < 0.8:\n",
        "            return 'High'\n",
        "        else:\n",
        "            return 'Very High'\n",
        "\n",
        "    def generate_dataset(self, n_samples=1000, start_date=None):\n",
        "        \"\"\"Generate synthetic dataset with n_samples\"\"\"\n",
        "        if start_date is None:\n",
        "            start_date = datetime.now()\n",
        "\n",
        "        data = []\n",
        "\n",
        "        for _ in range(n_samples):\n",
        "            # Generate random date and time (past 30 days)\n",
        "            days_back = np.random.randint(0, 30)\n",
        "            hours = np.random.randint(0, 24)\n",
        "            minutes = np.random.choice([0, 15, 30, 45])  # 15-min intervals\n",
        "            sample_date = start_date - timedelta(days=days_back, hours=np.random.randint(0, 24))\n",
        "            sample_date = sample_date.replace(hour=hours, minute=minutes, second=0, microsecond=0)\n",
        "\n",
        "            # Get day of week\n",
        "            day = self.days[sample_date.weekday()]\n",
        "\n",
        "            # Select random route\n",
        "            route = np.random.choice(self.routes)\n",
        "\n",
        "            # Generate temperature based on date and hour\n",
        "            temperature = self.get_temperature(sample_date, hours)\n",
        "\n",
        "            # Generate weather based on temperature and season\n",
        "            weather = self.get_weather(sample_date, temperature)\n",
        "\n",
        "            # Generate crowd level based on all factors\n",
        "            crowd_level = self.generate_crowd_level(hours, day, route, weather, temperature, sample_date)\n",
        "\n",
        "            # Create data point\n",
        "            data_point = {\n",
        "                'datetime': sample_date,\n",
        "                'hour': hours,\n",
        "                'minute': minutes,\n",
        "                'day_of_week': day,\n",
        "                'month': sample_date.month,\n",
        "                'route_id': route,\n",
        "                'weather': weather,\n",
        "                'temperature': temperature,\n",
        "                'is_holiday': int(self.is_holiday(sample_date)),\n",
        "                'is_weekend': int(day in ['Saturday', 'Sunday']),\n",
        "                'crowd_level': crowd_level\n",
        "            }\n",
        "\n",
        "            # Add any active events\n",
        "            events = self.get_active_events(sample_date, route)\n",
        "            data_point['has_event'] = 1 if events else 0\n",
        "\n",
        "            data.append(data_point)\n",
        "\n",
        "        return pd.DataFrame(data)\n"
      ],
      "metadata": {
        "id": "r_qowPTtFTPY"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "print(\"\\n🔄 Generating training data for model...\")\n",
        "data_generator = TrainingDataGenerator()\n",
        "df = data_generator.generate_dataset(n_samples=5000)\n",
        "\n",
        "# Display the first few rows\n",
        "print(\"\\n📊 Generated training data sample:\")\n",
        "display(df.head())\n",
        "\n",
        "# Data Statistics\n",
        "print(\"\\n📊 Data statistics:\")\n",
        "display(df.describe())\n"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 598
        },
        "id": "1BoME3hJFZXG",
        "outputId": "ac65505a-fc7e-416f-ccc5-723129ffc106"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "\n",
            "🔄 Generating training data for model...\n",
            "\n",
            "📊 Generated training data sample:\n"
          ]
        },
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "             datetime  hour  minute day_of_week  month route_id weather  \\\n",
              "0 2025-04-09 19:00:00    19       0   Wednesday      4  Route_C   Sunny   \n",
              "1 2025-04-14 21:00:00    21       0      Monday      4  Route_D   Rainy   \n",
              "2 2025-04-15 11:15:00    11      15     Tuesday      4  Route_E  Cloudy   \n",
              "3 2025-03-31 14:15:00    14      15      Monday      3  Route_C   Sunny   \n",
              "4 2025-04-08 06:15:00     6      15     Tuesday      4  Route_A  Cloudy   \n",
              "\n",
              "   temperature  is_holiday  is_weekend crowd_level  has_event  \n",
              "0         34.0           0           0   Very High          0  \n",
              "1         34.7           0           0   Very High          0  \n",
              "2         31.5           0           0      Medium          0  \n",
              "3         33.7           0           0        High          0  \n",
              "4         32.3           0           0      Medium          1  "
            ],
            "text/html": [
              "\n",
              "  <div id=\"df-69646ee6-f72f-4c5b-9df9-f0aa7a9e9e72\" class=\"colab-df-container\">\n",
              "    <div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>datetime</th>\n",
              "      <th>hour</th>\n",
              "      <th>minute</th>\n",
              "      <th>day_of_week</th>\n",
              "      <th>month</th>\n",
              "      <th>route_id</th>\n",
              "      <th>weather</th>\n",
              "      <th>temperature</th>\n",
              "      <th>is_holiday</th>\n",
              "      <th>is_weekend</th>\n",
              "      <th>crowd_level</th>\n",
              "      <th>has_event</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>0</th>\n",
              "      <td>2025-04-09 19:00:00</td>\n",
              "      <td>19</td>\n",
              "      <td>0</td>\n",
              "      <td>Wednesday</td>\n",
              "      <td>4</td>\n",
              "      <td>Route_C</td>\n",
              "      <td>Sunny</td>\n",
              "      <td>34.0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>Very High</td>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1</th>\n",
              "      <td>2025-04-14 21:00:00</td>\n",
              "      <td>21</td>\n",
              "      <td>0</td>\n",
              "      <td>Monday</td>\n",
              "      <td>4</td>\n",
              "      <td>Route_D</td>\n",
              "      <td>Rainy</td>\n",
              "      <td>34.7</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>Very High</td>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2</th>\n",
              "      <td>2025-04-15 11:15:00</td>\n",
              "      <td>11</td>\n",
              "      <td>15</td>\n",
              "      <td>Tuesday</td>\n",
              "      <td>4</td>\n",
              "      <td>Route_E</td>\n",
              "      <td>Cloudy</td>\n",
              "      <td>31.5</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>Medium</td>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>3</th>\n",
              "      <td>2025-03-31 14:15:00</td>\n",
              "      <td>14</td>\n",
              "      <td>15</td>\n",
              "      <td>Monday</td>\n",
              "      <td>3</td>\n",
              "      <td>Route_C</td>\n",
              "      <td>Sunny</td>\n",
              "      <td>33.7</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>High</td>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>4</th>\n",
              "      <td>2025-04-08 06:15:00</td>\n",
              "      <td>6</td>\n",
              "      <td>15</td>\n",
              "      <td>Tuesday</td>\n",
              "      <td>4</td>\n",
              "      <td>Route_A</td>\n",
              "      <td>Cloudy</td>\n",
              "      <td>32.3</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>Medium</td>\n",
              "      <td>1</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "</div>\n",
              "    <div class=\"colab-df-buttons\">\n",
              "\n",
              "  <div class=\"colab-df-container\">\n",
              "    <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-69646ee6-f72f-4c5b-9df9-f0aa7a9e9e72')\"\n",
              "            title=\"Convert this dataframe to an interactive table.\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 -960 960 960\">\n",
              "    <path d=\"M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z\"/>\n",
              "  </svg>\n",
              "    </button>\n",
              "\n",
              "  <style>\n",
              "    .colab-df-container {\n",
              "      display:flex;\n",
              "      gap: 12px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert {\n",
              "      background-color: #E8F0FE;\n",
              "      border: none;\n",
              "      border-radius: 50%;\n",
              "      cursor: pointer;\n",
              "      display: none;\n",
              "      fill: #1967D2;\n",
              "      height: 32px;\n",
              "      padding: 0 0 0 0;\n",
              "      width: 32px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert:hover {\n",
              "      background-color: #E2EBFA;\n",
              "      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "      fill: #174EA6;\n",
              "    }\n",
              "\n",
              "    .colab-df-buttons div {\n",
              "      margin-bottom: 4px;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert {\n",
              "      background-color: #3B4455;\n",
              "      fill: #D2E3FC;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert:hover {\n",
              "      background-color: #434B5C;\n",
              "      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "      fill: #FFFFFF;\n",
              "    }\n",
              "  </style>\n",
              "\n",
              "    <script>\n",
              "      const buttonEl =\n",
              "        document.querySelector('#df-69646ee6-f72f-4c5b-9df9-f0aa7a9e9e72 button.colab-df-convert');\n",
              "      buttonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "      async function convertToInteractive(key) {\n",
              "        const element = document.querySelector('#df-69646ee6-f72f-4c5b-9df9-f0aa7a9e9e72');\n",
              "        const dataTable =\n",
              "          await google.colab.kernel.invokeFunction('convertToInteractive',\n",
              "                                                    [key], {});\n",
              "        if (!dataTable) return;\n",
              "\n",
              "        const docLinkHtml = 'Like what you see? Visit the ' +\n",
              "          '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n",
              "          + ' to learn more about interactive tables.';\n",
              "        element.innerHTML = '';\n",
              "        dataTable['output_type'] = 'display_data';\n",
              "        await google.colab.output.renderOutput(dataTable, element);\n",
              "        const docLink = document.createElement('div');\n",
              "        docLink.innerHTML = docLinkHtml;\n",
              "        element.appendChild(docLink);\n",
              "      }\n",
              "    </script>\n",
              "  </div>\n",
              "\n",
              "\n",
              "<div id=\"df-1f9c7c8b-2312-4e89-a154-75930be432a6\">\n",
              "  <button class=\"colab-df-quickchart\" onclick=\"quickchart('df-1f9c7c8b-2312-4e89-a154-75930be432a6')\"\n",
              "            title=\"Suggest charts\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "     width=\"24px\">\n",
              "    <g>\n",
              "        <path d=\"M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zM9 17H7v-7h2v7zm4 0h-2V7h2v10zm4 0h-2v-4h2v4z\"/>\n",
              "    </g>\n",
              "</svg>\n",
              "  </button>\n",
              "\n",
              "<style>\n",
              "  .colab-df-quickchart {\n",
              "      --bg-color: #E8F0FE;\n",
              "      --fill-color: #1967D2;\n",
              "      --hover-bg-color: #E2EBFA;\n",
              "      --hover-fill-color: #174EA6;\n",
              "      --disabled-fill-color: #AAA;\n",
              "      --disabled-bg-color: #DDD;\n",
              "  }\n",
              "\n",
              "  [theme=dark] .colab-df-quickchart {\n",
              "      --bg-color: #3B4455;\n",
              "      --fill-color: #D2E3FC;\n",
              "      --hover-bg-color: #434B5C;\n",
              "      --hover-fill-color: #FFFFFF;\n",
              "      --disabled-bg-color: #3B4455;\n",
              "      --disabled-fill-color: #666;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart {\n",
              "    background-color: var(--bg-color);\n",
              "    border: none;\n",
              "    border-radius: 50%;\n",
              "    cursor: pointer;\n",
              "    display: none;\n",
              "    fill: var(--fill-color);\n",
              "    height: 32px;\n",
              "    padding: 0;\n",
              "    width: 32px;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart:hover {\n",
              "    background-color: var(--hover-bg-color);\n",
              "    box-shadow: 0 1px 2px rgba(60, 64, 67, 0.3), 0 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "    fill: var(--button-hover-fill-color);\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart-complete:disabled,\n",
              "  .colab-df-quickchart-complete:disabled:hover {\n",
              "    background-color: var(--disabled-bg-color);\n",
              "    fill: var(--disabled-fill-color);\n",
              "    box-shadow: none;\n",
              "  }\n",
              "\n",
              "  .colab-df-spinner {\n",
              "    border: 2px solid var(--fill-color);\n",
              "    border-color: transparent;\n",
              "    border-bottom-color: var(--fill-color);\n",
              "    animation:\n",
              "      spin 1s steps(1) infinite;\n",
              "  }\n",
              "\n",
              "  @keyframes spin {\n",
              "    0% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "      border-left-color: var(--fill-color);\n",
              "    }\n",
              "    20% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    30% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    40% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    60% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    80% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "    90% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "  }\n",
              "</style>\n",
              "\n",
              "  <script>\n",
              "    async function quickchart(key) {\n",
              "      const quickchartButtonEl =\n",
              "        document.querySelector('#' + key + ' button');\n",
              "      quickchartButtonEl.disabled = true;  // To prevent multiple clicks.\n",
              "      quickchartButtonEl.classList.add('colab-df-spinner');\n",
              "      try {\n",
              "        const charts = await google.colab.kernel.invokeFunction(\n",
              "            'suggestCharts', [key], {});\n",
              "      } catch (error) {\n",
              "        console.error('Error during call to suggestCharts:', error);\n",
              "      }\n",
              "      quickchartButtonEl.classList.remove('colab-df-spinner');\n",
              "      quickchartButtonEl.classList.add('colab-df-quickchart-complete');\n",
              "    }\n",
              "    (() => {\n",
              "      let quickchartButtonEl =\n",
              "        document.querySelector('#df-1f9c7c8b-2312-4e89-a154-75930be432a6 button');\n",
              "      quickchartButtonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "    })();\n",
              "  </script>\n",
              "</div>\n",
              "\n",
              "    </div>\n",
              "  </div>\n"
            ],
            "application/vnd.google.colaboratory.intrinsic+json": {
              "type": "dataframe",
              "summary": "{\n  \"name\": \"display(df\",\n  \"rows\": 5,\n  \"fields\": [\n    {\n      \"column\": \"datetime\",\n      \"properties\": {\n        \"dtype\": \"date\",\n        \"min\": \"2025-03-31 14:15:00\",\n        \"max\": \"2025-04-15 11:15:00\",\n        \"num_unique_values\": 5,\n        \"samples\": [\n          \"2025-04-14 21:00:00\",\n          \"2025-04-08 06:15:00\",\n          \"2025-04-15 11:15:00\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"hour\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 6,\n        \"min\": 6,\n        \"max\": 21,\n        \"num_unique_values\": 5,\n        \"samples\": [\n          21,\n          6,\n          11\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"minute\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 8,\n        \"min\": 0,\n        \"max\": 15,\n        \"num_unique_values\": 2,\n        \"samples\": [\n          15,\n          0\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"day_of_week\",\n      \"properties\": {\n        \"dtype\": \"string\",\n        \"num_unique_values\": 3,\n        \"samples\": [\n          \"Wednesday\",\n          \"Monday\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"month\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 0,\n        \"min\": 3,\n        \"max\": 4,\n        \"num_unique_values\": 2,\n        \"samples\": [\n          3,\n          4\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"route_id\",\n      \"properties\": {\n        \"dtype\": \"string\",\n        \"num_unique_values\": 4,\n        \"samples\": [\n          \"Route_D\",\n          \"Route_A\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"weather\",\n      \"properties\": {\n        \"dtype\": \"string\",\n        \"num_unique_values\": 3,\n        \"samples\": [\n          \"Sunny\",\n          \"Rainy\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"temperature\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 1.3069047402163647,\n        \"min\": 31.5,\n        \"max\": 34.7,\n        \"num_unique_values\": 5,\n        \"samples\": [\n          34.7,\n          32.3\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"is_holiday\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 0,\n        \"min\": 0,\n        \"max\": 0,\n        \"num_unique_values\": 1,\n        \"samples\": [\n          0\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"is_weekend\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 0,\n        \"min\": 0,\n        \"max\": 0,\n        \"num_unique_values\": 1,\n        \"samples\": [\n          0\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"crowd_level\",\n      \"properties\": {\n        \"dtype\": \"string\",\n        \"num_unique_values\": 3,\n        \"samples\": [\n          \"Very High\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"has_event\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 0,\n        \"min\": 0,\n        \"max\": 1,\n        \"num_unique_values\": 2,\n        \"samples\": [\n          1\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    }\n  ]\n}"
            }
          },
          "metadata": {}
        },
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "\n",
            "📊 Data statistics:\n"
          ]
        },
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "                            datetime         hour       minute        month  \\\n",
              "count                           5000  5000.000000  5000.000000  5000.000000   \n",
              "mean   2025-04-01 12:31:51.780000256    11.570000    22.239000     3.513600   \n",
              "min              2025-03-17 00:00:00     0.000000     0.000000     3.000000   \n",
              "25%              2025-03-25 04:00:00     6.000000     0.000000     3.000000   \n",
              "50%              2025-04-01 10:07:30    12.000000    15.000000     4.000000   \n",
              "75%              2025-04-08 22:00:00    17.000000    30.000000     4.000000   \n",
              "max              2025-04-16 23:45:00    23.000000    45.000000     4.000000   \n",
              "std                              NaN     6.905262    16.772839     0.499865   \n",
              "\n",
              "       temperature  is_holiday   is_weekend    has_event  \n",
              "count  5000.000000      5000.0  5000.000000  5000.000000  \n",
              "mean     33.199540         0.0     0.268200     0.128000  \n",
              "min      24.200000         0.0     0.000000     0.000000  \n",
              "25%      31.500000         0.0     0.000000     0.000000  \n",
              "50%      33.300000         0.0     0.000000     0.000000  \n",
              "75%      34.900000         0.0     1.000000     0.000000  \n",
              "max      42.100000         0.0     1.000000     1.000000  \n",
              "std       2.532559         0.0     0.443067     0.334123  "
            ],
            "text/html": [
              "\n",
              "  <div id=\"df-71882683-4787-4a05-8028-1a053ad084c0\" class=\"colab-df-container\">\n",
              "    <div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>datetime</th>\n",
              "      <th>hour</th>\n",
              "      <th>minute</th>\n",
              "      <th>month</th>\n",
              "      <th>temperature</th>\n",
              "      <th>is_holiday</th>\n",
              "      <th>is_weekend</th>\n",
              "      <th>has_event</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>count</th>\n",
              "      <td>5000</td>\n",
              "      <td>5000.000000</td>\n",
              "      <td>5000.000000</td>\n",
              "      <td>5000.000000</td>\n",
              "      <td>5000.000000</td>\n",
              "      <td>5000.0</td>\n",
              "      <td>5000.000000</td>\n",
              "      <td>5000.000000</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>mean</th>\n",
              "      <td>2025-04-01 12:31:51.780000256</td>\n",
              "      <td>11.570000</td>\n",
              "      <td>22.239000</td>\n",
              "      <td>3.513600</td>\n",
              "      <td>33.199540</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.268200</td>\n",
              "      <td>0.128000</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>min</th>\n",
              "      <td>2025-03-17 00:00:00</td>\n",
              "      <td>0.000000</td>\n",
              "      <td>0.000000</td>\n",
              "      <td>3.000000</td>\n",
              "      <td>24.200000</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.000000</td>\n",
              "      <td>0.000000</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>25%</th>\n",
              "      <td>2025-03-25 04:00:00</td>\n",
              "      <td>6.000000</td>\n",
              "      <td>0.000000</td>\n",
              "      <td>3.000000</td>\n",
              "      <td>31.500000</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.000000</td>\n",
              "      <td>0.000000</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>50%</th>\n",
              "      <td>2025-04-01 10:07:30</td>\n",
              "      <td>12.000000</td>\n",
              "      <td>15.000000</td>\n",
              "      <td>4.000000</td>\n",
              "      <td>33.300000</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.000000</td>\n",
              "      <td>0.000000</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>75%</th>\n",
              "      <td>2025-04-08 22:00:00</td>\n",
              "      <td>17.000000</td>\n",
              "      <td>30.000000</td>\n",
              "      <td>4.000000</td>\n",
              "      <td>34.900000</td>\n",
              "      <td>0.0</td>\n",
              "      <td>1.000000</td>\n",
              "      <td>0.000000</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>max</th>\n",
              "      <td>2025-04-16 23:45:00</td>\n",
              "      <td>23.000000</td>\n",
              "      <td>45.000000</td>\n",
              "      <td>4.000000</td>\n",
              "      <td>42.100000</td>\n",
              "      <td>0.0</td>\n",
              "      <td>1.000000</td>\n",
              "      <td>1.000000</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>std</th>\n",
              "      <td>NaN</td>\n",
              "      <td>6.905262</td>\n",
              "      <td>16.772839</td>\n",
              "      <td>0.499865</td>\n",
              "      <td>2.532559</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.443067</td>\n",
              "      <td>0.334123</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "</div>\n",
              "    <div class=\"colab-df-buttons\">\n",
              "\n",
              "  <div class=\"colab-df-container\">\n",
              "    <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-71882683-4787-4a05-8028-1a053ad084c0')\"\n",
              "            title=\"Convert this dataframe to an interactive table.\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 -960 960 960\">\n",
              "    <path d=\"M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z\"/>\n",
              "  </svg>\n",
              "    </button>\n",
              "\n",
              "  <style>\n",
              "    .colab-df-container {\n",
              "      display:flex;\n",
              "      gap: 12px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert {\n",
              "      background-color: #E8F0FE;\n",
              "      border: none;\n",
              "      border-radius: 50%;\n",
              "      cursor: pointer;\n",
              "      display: none;\n",
              "      fill: #1967D2;\n",
              "      height: 32px;\n",
              "      padding: 0 0 0 0;\n",
              "      width: 32px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert:hover {\n",
              "      background-color: #E2EBFA;\n",
              "      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "      fill: #174EA6;\n",
              "    }\n",
              "\n",
              "    .colab-df-buttons div {\n",
              "      margin-bottom: 4px;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert {\n",
              "      background-color: #3B4455;\n",
              "      fill: #D2E3FC;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert:hover {\n",
              "      background-color: #434B5C;\n",
              "      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "      fill: #FFFFFF;\n",
              "    }\n",
              "  </style>\n",
              "\n",
              "    <script>\n",
              "      const buttonEl =\n",
              "        document.querySelector('#df-71882683-4787-4a05-8028-1a053ad084c0 button.colab-df-convert');\n",
              "      buttonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "      async function convertToInteractive(key) {\n",
              "        const element = document.querySelector('#df-71882683-4787-4a05-8028-1a053ad084c0');\n",
              "        const dataTable =\n",
              "          await google.colab.kernel.invokeFunction('convertToInteractive',\n",
              "                                                    [key], {});\n",
              "        if (!dataTable) return;\n",
              "\n",
              "        const docLinkHtml = 'Like what you see? Visit the ' +\n",
              "          '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n",
              "          + ' to learn more about interactive tables.';\n",
              "        element.innerHTML = '';\n",
              "        dataTable['output_type'] = 'display_data';\n",
              "        await google.colab.output.renderOutput(dataTable, element);\n",
              "        const docLink = document.createElement('div');\n",
              "        docLink.innerHTML = docLinkHtml;\n",
              "        element.appendChild(docLink);\n",
              "      }\n",
              "    </script>\n",
              "  </div>\n",
              "\n",
              "\n",
              "<div id=\"df-03ede387-d245-4b09-8c36-52f3b987358c\">\n",
              "  <button class=\"colab-df-quickchart\" onclick=\"quickchart('df-03ede387-d245-4b09-8c36-52f3b987358c')\"\n",
              "            title=\"Suggest charts\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "     width=\"24px\">\n",
              "    <g>\n",
              "        <path d=\"M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zM9 17H7v-7h2v7zm4 0h-2V7h2v10zm4 0h-2v-4h2v4z\"/>\n",
              "    </g>\n",
              "</svg>\n",
              "  </button>\n",
              "\n",
              "<style>\n",
              "  .colab-df-quickchart {\n",
              "      --bg-color: #E8F0FE;\n",
              "      --fill-color: #1967D2;\n",
              "      --hover-bg-color: #E2EBFA;\n",
              "      --hover-fill-color: #174EA6;\n",
              "      --disabled-fill-color: #AAA;\n",
              "      --disabled-bg-color: #DDD;\n",
              "  }\n",
              "\n",
              "  [theme=dark] .colab-df-quickchart {\n",
              "      --bg-color: #3B4455;\n",
              "      --fill-color: #D2E3FC;\n",
              "      --hover-bg-color: #434B5C;\n",
              "      --hover-fill-color: #FFFFFF;\n",
              "      --disabled-bg-color: #3B4455;\n",
              "      --disabled-fill-color: #666;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart {\n",
              "    background-color: var(--bg-color);\n",
              "    border: none;\n",
              "    border-radius: 50%;\n",
              "    cursor: pointer;\n",
              "    display: none;\n",
              "    fill: var(--fill-color);\n",
              "    height: 32px;\n",
              "    padding: 0;\n",
              "    width: 32px;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart:hover {\n",
              "    background-color: var(--hover-bg-color);\n",
              "    box-shadow: 0 1px 2px rgba(60, 64, 67, 0.3), 0 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "    fill: var(--button-hover-fill-color);\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart-complete:disabled,\n",
              "  .colab-df-quickchart-complete:disabled:hover {\n",
              "    background-color: var(--disabled-bg-color);\n",
              "    fill: var(--disabled-fill-color);\n",
              "    box-shadow: none;\n",
              "  }\n",
              "\n",
              "  .colab-df-spinner {\n",
              "    border: 2px solid var(--fill-color);\n",
              "    border-color: transparent;\n",
              "    border-bottom-color: var(--fill-color);\n",
              "    animation:\n",
              "      spin 1s steps(1) infinite;\n",
              "  }\n",
              "\n",
              "  @keyframes spin {\n",
              "    0% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "      border-left-color: var(--fill-color);\n",
              "    }\n",
              "    20% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    30% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    40% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    60% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    80% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "    90% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "  }\n",
              "</style>\n",
              "\n",
              "  <script>\n",
              "    async function quickchart(key) {\n",
              "      const quickchartButtonEl =\n",
              "        document.querySelector('#' + key + ' button');\n",
              "      quickchartButtonEl.disabled = true;  // To prevent multiple clicks.\n",
              "      quickchartButtonEl.classList.add('colab-df-spinner');\n",
              "      try {\n",
              "        const charts = await google.colab.kernel.invokeFunction(\n",
              "            'suggestCharts', [key], {});\n",
              "      } catch (error) {\n",
              "        console.error('Error during call to suggestCharts:', error);\n",
              "      }\n",
              "      quickchartButtonEl.classList.remove('colab-df-spinner');\n",
              "      quickchartButtonEl.classList.add('colab-df-quickchart-complete');\n",
              "    }\n",
              "    (() => {\n",
              "      let quickchartButtonEl =\n",
              "        document.querySelector('#df-03ede387-d245-4b09-8c36-52f3b987358c button');\n",
              "      quickchartButtonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "    })();\n",
              "  </script>\n",
              "</div>\n",
              "\n",
              "    </div>\n",
              "  </div>\n"
            ],
            "application/vnd.google.colaboratory.intrinsic+json": {
              "type": "dataframe",
              "summary": "{\n  \"name\": \"display(df\",\n  \"rows\": 8,\n  \"fields\": [\n    {\n      \"column\": \"datetime\",\n      \"properties\": {\n        \"dtype\": \"date\",\n        \"min\": \"1970-01-01 00:00:00.000005\",\n        \"max\": \"2025-04-16 23:45:00\",\n        \"num_unique_values\": 7,\n        \"samples\": [\n          \"5000\",\n          \"2025-04-01 12:31:51.780000256\",\n          \"2025-04-08 22:00:00\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"hour\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 1763.91830117115,\n        \"min\": 0.0,\n        \"max\": 5000.0,\n        \"num_unique_values\": 8,\n        \"samples\": [\n          11.57,\n          17.0,\n          5000.0\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"minute\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 1761.3136572723747,\n        \"min\": 0.0,\n        \"max\": 5000.0,\n        \"num_unique_values\": 7,\n        \"samples\": [\n          5000.0,\n          22.239,\n          45.0\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"month\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 1766.6554838340464,\n        \"min\": 0.49986499477618695,\n        \"max\": 5000.0,\n        \"num_unique_values\": 5,\n        \"samples\": [\n          3.5136,\n          0.49986499477618695,\n          3.0\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"temperature\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 1757.6174506675363,\n        \"min\": 2.532558500590239,\n        \"max\": 5000.0,\n        \"num_unique_values\": 8,\n        \"samples\": [\n          33.19954,\n          34.9,\n          5000.0\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"is_holiday\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 1767.7669529663688,\n        \"min\": 0.0,\n        \"max\": 5000.0,\n        \"num_unique_values\": 2,\n        \"samples\": [\n          0.0,\n          5000.0\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"is_weekend\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 1767.6300625456079,\n        \"min\": 0.0,\n        \"max\": 5000.0,\n        \"num_unique_values\": 5,\n        \"samples\": [\n          0.2682,\n          0.443066610798343\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"has_event\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 1767.693137832022,\n        \"min\": 0.0,\n        \"max\": 5000.0,\n        \"num_unique_values\": 5,\n        \"samples\": [\n          0.128,\n          0.33412322227815544\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    }\n  ]\n}"
            }
          },
          "metadata": {}
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "print(\"\\n📈 Data visualization:\")\n",
        "\n",
        "plt.figure(figsize=(15, 10))\n",
        "\n",
        "# Plot 1: Crowd distribution by hour\n",
        "plt.subplot(2, 2, 1)\n",
        "crowd_by_hour = pd.crosstab(df['hour'], df['crowd_level'])\n",
        "crowd_by_hour.plot(kind='bar', stacked=True, ax=plt.gca())\n",
        "plt.title('Crowd Distribution by Hour')\n",
        "plt.xlabel('Hour of Day')\n",
        "plt.ylabel('Count')\n",
        "plt.xticks(rotation=45)\n",
        "\n",
        "# Plot 2: Crowd by day of week\n",
        "plt.subplot(2, 2, 2)\n",
        "# Ensure days are in correct order\n",
        "day_order = ['Monday', 'Tuesday', 'Wednesday', 'Thursday', 'Friday', 'Saturday', 'Sunday']\n",
        "crowd_by_day = pd.crosstab(pd.Categorical(df['day_of_week'], categories=day_order), df['crowd_level'])\n",
        "crowd_by_day.plot(kind='bar', stacked=True, ax=plt.gca())\n",
        "plt.title('Crowd Distribution by Day')\n",
        "plt.xlabel('Day of Week')\n",
        "plt.ylabel('Count')\n",
        "plt.xticks(rotation=45)\n",
        "\n",
        "# Plot 3: Crowd by weather\n",
        "plt.subplot(2, 2, 3)\n",
        "crowd_by_weather = pd.crosstab(df['weather'], df['crowd_level'])\n",
        "crowd_by_weather.plot(kind='bar', stacked=True, ax=plt.gca())\n",
        "plt.title('Crowd Distribution by Weather')\n",
        "plt.xlabel('Weather Condition')\n",
        "plt.ylabel('Count')\n",
        "plt.xticks(rotation=45)\n",
        "\n",
        "# Plot 4: Crowd distribution by route\n",
        "plt.subplot(2, 2, 4)\n",
        "crowd_by_route = pd.crosstab(df['route_id'], df['crowd_level'])\n",
        "crowd_by_route.plot(kind='bar', stacked=True, ax=plt.gca())\n",
        "plt.title('Crowd Distribution by Route')\n",
        "plt.xlabel('Route')\n",
        "plt.ylabel('Count')\n",
        "plt.xticks(rotation=45)\n",
        "\n",
        "plt.tight_layout()\n",
        "plt.show()\n"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 992
        },
        "id": "hAOitYcJFeFO",
        "outputId": "59a49f32-e388-42ba-dc04-9a46bf83aa77"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "\n",
            "📈 Data visualization:\n"
          ]
        },
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 1500x1000 with 4 Axes>"
            ],
            "image/png": "\n"
          },
          "metadata": {}
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "plt.figure(figsize=(15, 10))\n",
        "\n",
        "# Plot 5: Temperature vs Crowd Level\n",
        "plt.subplot(2, 2, 1)\n",
        "sns.boxplot(x='crowd_level', y='temperature', data=df)\n",
        "plt.title('Temperature vs Crowd Level')\n",
        "plt.xlabel('Crowd Level')\n",
        "plt.ylabel('Temperature (°C)')\n",
        "\n",
        "# Plot 6: Weekend/Weekday Effect\n",
        "plt.subplot(2, 2, 2)\n",
        "weekend_effect = pd.crosstab(df['is_weekend'], df['crowd_level'])\n",
        "weekend_effect.rename(index={0: 'Weekday', 1: 'Weekend'}, inplace=True)\n",
        "weekend_effect.plot(kind='bar', stacked=True, ax=plt.gca())\n",
        "plt.title('Weekend vs Weekday Crowd Levels')\n",
        "plt.xlabel('Day Type')\n",
        "plt.ylabel('Count')\n",
        "\n",
        "# Plot 7: Holiday Effect\n",
        "plt.subplot(2, 2, 3)\n",
        "holiday_effect = pd.crosstab(df['is_holiday'], df['crowd_level'])\n",
        "holiday_effect.rename(index={0: 'Regular Day', 1: 'Holiday'}, inplace=True)\n",
        "holiday_effect.plot(kind='bar', stacked=True, ax=plt.gca())\n",
        "plt.title('Holiday Effect on Crowd Levels')\n",
        "plt.xlabel('Day Type')\n",
        "plt.ylabel('Count')\n",
        "\n",
        "# Plot 8: Event Effect\n",
        "plt.subplot(2, 2, 4)\n",
        "event_effect = pd.crosstab(df['has_event'], df['crowd_level'])\n",
        "event_effect.rename(index={0: 'No Event', 1: 'Event'}, inplace=True)\n",
        "event_effect.plot(kind='bar', stacked=True, ax=plt.gca())\n",
        "plt.title('Special Events Effect on Crowd Levels')\n",
        "plt.xlabel('Event Status')\n",
        "plt.ylabel('Count')\n",
        "\n",
        "plt.tight_layout()\n",
        "plt.show()\n"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 957
        },
        "id": "Ji4ScbAaFg_5",
        "outputId": "381e15d3-a3ef-4a1c-fd86-ca99739b8ecb"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 1500x1000 with 4 Axes>"
            ],
            "image/png": "\n"
          },
          "metadata": {}
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "print(\"\\n🧼 Preprocessing data...\")\n",
        "\n",
        "# Encode categorical columns\n",
        "le_day = LabelEncoder()\n",
        "le_route = LabelEncoder()\n",
        "le_weather = LabelEncoder()\n",
        "le_crowd = LabelEncoder()\n",
        "\n",
        "df['day_of_week_enc'] = le_day.fit_transform(df['day_of_week'])\n",
        "df['route_id_enc'] = le_route.fit_transform(df['route_id'])\n",
        "df['weather_enc'] = le_weather.fit_transform(df['weather'])\n",
        "df['crowd_level_enc'] = le_crowd.fit_transform(df['crowd_level'])\n",
        "\n",
        "# Save encoders for later use\n",
        "encoders = {\n",
        "    'day_of_week': le_day,\n",
        "    'route_id': le_route,\n",
        "    'weather': le_weather,\n",
        "    'crowd_level': le_crowd\n",
        "}\n",
        "\n",
        "# Feature selection\n",
        "X = df[['hour', 'day_of_week_enc', 'route_id_enc', 'weather_enc', 'temperature',\n",
        "        'is_holiday', 'is_weekend', 'has_event', 'month']]\n",
        "y = df['crowd_level_enc']\n",
        "\n",
        "# CELL 11: Train-Test Split & Model Training\n",
        "print(\"\\n🧠 Training machine learning model...\")\n",
        "X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)\n",
        "\n",
        "model = RandomForestClassifier(n_estimators=100, random_state=42)\n",
        "model.fit(X_train, y_train)"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 153
        },
        "id": "Rk6BfYQ4FjrP",
        "outputId": "fab8c642-39b6-45a3-9672-d45a78228723"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "\n",
            "🧼 Preprocessing data...\n",
            "\n",
            "🧠 Training machine learning model...\n"
          ]
        },
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "RandomForestClassifier(random_state=42)"
            ],
            "text/html": [
              "<style>#sk-container-id-1 {\n",
              "  /* Definition of color scheme common for light and dark mode */\n",
              "  --sklearn-color-text: #000;\n",
              "  --sklearn-color-text-muted: #666;\n",
              "  --sklearn-color-line: gray;\n",
              "  /* Definition of color scheme for unfitted estimators */\n",
              "  --sklearn-color-unfitted-level-0: #fff5e6;\n",
              "  --sklearn-color-unfitted-level-1: #f6e4d2;\n",
              "  --sklearn-color-unfitted-level-2: #ffe0b3;\n",
              "  --sklearn-color-unfitted-level-3: chocolate;\n",
              "  /* Definition of color scheme for fitted estimators */\n",
              "  --sklearn-color-fitted-level-0: #f0f8ff;\n",
              "  --sklearn-color-fitted-level-1: #d4ebff;\n",
              "  --sklearn-color-fitted-level-2: #b3dbfd;\n",
              "  --sklearn-color-fitted-level-3: cornflowerblue;\n",
              "\n",
              "  /* Specific color for light theme */\n",
              "  --sklearn-color-text-on-default-background: var(--sg-text-color, var(--theme-code-foreground, var(--jp-content-font-color1, black)));\n",
              "  --sklearn-color-background: var(--sg-background-color, var(--theme-background, var(--jp-layout-color0, white)));\n",
              "  --sklearn-color-border-box: var(--sg-text-color, var(--theme-code-foreground, var(--jp-content-font-color1, black)));\n",
              "  --sklearn-color-icon: #696969;\n",
              "\n",
              "  @media (prefers-color-scheme: dark) {\n",
              "    /* Redefinition of color scheme for dark theme */\n",
              "    --sklearn-color-text-on-default-background: var(--sg-text-color, var(--theme-code-foreground, var(--jp-content-font-color1, white)));\n",
              "    --sklearn-color-background: var(--sg-background-color, var(--theme-background, var(--jp-layout-color0, #111)));\n",
              "    --sklearn-color-border-box: var(--sg-text-color, var(--theme-code-foreground, var(--jp-content-font-color1, white)));\n",
              "    --sklearn-color-icon: #878787;\n",
              "  }\n",
              "}\n",
              "\n",
              "#sk-container-id-1 {\n",
              "  color: var(--sklearn-color-text);\n",
              "}\n",
              "\n",
              "#sk-container-id-1 pre {\n",
              "  padding: 0;\n",
              "}\n",
              "\n",
              "#sk-container-id-1 input.sk-hidden--visually {\n",
              "  border: 0;\n",
              "  clip: rect(1px 1px 1px 1px);\n",
              "  clip: rect(1px, 1px, 1px, 1px);\n",
              "  height: 1px;\n",
              "  margin: -1px;\n",
              "  overflow: hidden;\n",
              "  padding: 0;\n",
              "  position: absolute;\n",
              "  width: 1px;\n",
              "}\n",
              "\n",
              "#sk-container-id-1 div.sk-dashed-wrapped {\n",
              "  border: 1px dashed var(--sklearn-color-line);\n",
              "  margin: 0 0.4em 0.5em 0.4em;\n",
              "  box-sizing: border-box;\n",
              "  padding-bottom: 0.4em;\n",
              "  background-color: var(--sklearn-color-background);\n",
              "}\n",
              "\n",
              "#sk-container-id-1 div.sk-container {\n",
              "  /* jupyter's `normalize.less` sets `[hidden] { display: none; }`\n",
              "     but bootstrap.min.css set `[hidden] { display: none !important; }`\n",
              "     so we also need the `!important` here to be able to override the\n",
              "     default hidden behavior on the sphinx rendered scikit-learn.org.\n",
              "     See: https://github.com/scikit-learn/scikit-learn/issues/21755 */\n",
              "  display: inline-block !important;\n",
              "  position: relative;\n",
              "}\n",
              "\n",
              "#sk-container-id-1 div.sk-text-repr-fallback {\n",
              "  display: none;\n",
              "}\n",
              "\n",
              "div.sk-parallel-item,\n",
              "div.sk-serial,\n",
              "div.sk-item {\n",
              "  /* draw centered vertical line to link estimators */\n",
              "  background-image: linear-gradient(var(--sklearn-color-text-on-default-background), var(--sklearn-color-text-on-default-background));\n",
              "  background-size: 2px 100%;\n",
              "  background-repeat: no-repeat;\n",
              "  background-position: center center;\n",
              "}\n",
              "\n",
              "/* Parallel-specific style estimator block */\n",
              "\n",
              "#sk-container-id-1 div.sk-parallel-item::after {\n",
              "  content: \"\";\n",
              "  width: 100%;\n",
              "  border-bottom: 2px solid var(--sklearn-color-text-on-default-background);\n",
              "  flex-grow: 1;\n",
              "}\n",
              "\n",
              "#sk-container-id-1 div.sk-parallel {\n",
              "  display: flex;\n",
              "  align-items: stretch;\n",
              "  justify-content: center;\n",
              "  background-color: var(--sklearn-color-background);\n",
              "  position: relative;\n",
              "}\n",
              "\n",
              "#sk-container-id-1 div.sk-parallel-item {\n",
              "  display: flex;\n",
              "  flex-direction: column;\n",
              "}\n",
              "\n",
              "#sk-container-id-1 div.sk-parallel-item:first-child::after {\n",
              "  align-self: flex-end;\n",
              "  width: 50%;\n",
              "}\n",
              "\n",
              "#sk-container-id-1 div.sk-parallel-item:last-child::after {\n",
              "  align-self: flex-start;\n",
              "  width: 50%;\n",
              "}\n",
              "\n",
              "#sk-container-id-1 div.sk-parallel-item:only-child::after {\n",
              "  width: 0;\n",
              "}\n",
              "\n",
              "/* Serial-specific style estimator block */\n",
              "\n",
              "#sk-container-id-1 div.sk-serial {\n",
              "  display: flex;\n",
              "  flex-direction: column;\n",
              "  align-items: center;\n",
              "  background-color: var(--sklearn-color-background);\n",
              "  padding-right: 1em;\n",
              "  padding-left: 1em;\n",
              "}\n",
              "\n",
              "\n",
              "/* Toggleable style: style used for estimator/Pipeline/ColumnTransformer box that is\n",
              "clickable and can be expanded/collapsed.\n",
              "- Pipeline and ColumnTransformer use this feature and define the default style\n",
              "- Estimators will overwrite some part of the style using the `sk-estimator` class\n",
              "*/\n",
              "\n",
              "/* Pipeline and ColumnTransformer style (default) */\n",
              "\n",
              "#sk-container-id-1 div.sk-toggleable {\n",
              "  /* Default theme specific background. It is overwritten whether we have a\n",
              "  specific estimator or a Pipeline/ColumnTransformer */\n",
              "  background-color: var(--sklearn-color-background);\n",
              "}\n",
              "\n",
              "/* Toggleable label */\n",
              "#sk-container-id-1 label.sk-toggleable__label {\n",
              "  cursor: pointer;\n",
              "  display: flex;\n",
              "  width: 100%;\n",
              "  margin-bottom: 0;\n",
              "  padding: 0.5em;\n",
              "  box-sizing: border-box;\n",
              "  text-align: center;\n",
              "  align-items: start;\n",
              "  justify-content: space-between;\n",
              "  gap: 0.5em;\n",
              "}\n",
              "\n",
              "#sk-container-id-1 label.sk-toggleable__label .caption {\n",
              "  font-size: 0.6rem;\n",
              "  font-weight: lighter;\n",
              "  color: var(--sklearn-color-text-muted);\n",
              "}\n",
              "\n",
              "#sk-container-id-1 label.sk-toggleable__label-arrow:before {\n",
              "  /* Arrow on the left of the label */\n",
              "  content: \"▸\";\n",
              "  float: left;\n",
              "  margin-right: 0.25em;\n",
              "  color: var(--sklearn-color-icon);\n",
              "}\n",
              "\n",
              "#sk-container-id-1 label.sk-toggleable__label-arrow:hover:before {\n",
              "  color: var(--sklearn-color-text);\n",
              "}\n",
              "\n",
              "/* Toggleable content - dropdown */\n",
              "\n",
              "#sk-container-id-1 div.sk-toggleable__content {\n",
              "  max-height: 0;\n",
              "  max-width: 0;\n",
              "  overflow: hidden;\n",
              "  text-align: left;\n",
              "  /* unfitted */\n",
              "  background-color: var(--sklearn-color-unfitted-level-0);\n",
              "}\n",
              "\n",
              "#sk-container-id-1 div.sk-toggleable__content.fitted {\n",
              "  /* fitted */\n",
              "  background-color: var(--sklearn-color-fitted-level-0);\n",
              "}\n",
              "\n",
              "#sk-container-id-1 div.sk-toggleable__content pre {\n",
              "  margin: 0.2em;\n",
              "  border-radius: 0.25em;\n",
              "  color: var(--sklearn-color-text);\n",
              "  /* unfitted */\n",
              "  background-color: var(--sklearn-color-unfitted-level-0);\n",
              "}\n",
              "\n",
              "#sk-container-id-1 div.sk-toggleable__content.fitted pre {\n",
              "  /* unfitted */\n",
              "  background-color: var(--sklearn-color-fitted-level-0);\n",
              "}\n",
              "\n",
              "#sk-container-id-1 input.sk-toggleable__control:checked~div.sk-toggleable__content {\n",
              "  /* Expand drop-down */\n",
              "  max-height: 200px;\n",
              "  max-width: 100%;\n",
              "  overflow: auto;\n",
              "}\n",
              "\n",
              "#sk-container-id-1 input.sk-toggleable__control:checked~label.sk-toggleable__label-arrow:before {\n",
              "  content: \"▾\";\n",
              "}\n",
              "\n",
              "/* Pipeline/ColumnTransformer-specific style */\n",
              "\n",
              "#sk-container-id-1 div.sk-label input.sk-toggleable__control:checked~label.sk-toggleable__label {\n",
              "  color: var(--sklearn-color-text);\n",
              "  background-color: var(--sklearn-color-unfitted-level-2);\n",
              "}\n",
              "\n",
              "#sk-container-id-1 div.sk-label.fitted input.sk-toggleable__control:checked~label.sk-toggleable__label {\n",
              "  background-color: var(--sklearn-color-fitted-level-2);\n",
              "}\n",
              "\n",
              "/* Estimator-specific style */\n",
              "\n",
              "/* Colorize estimator box */\n",
              "#sk-container-id-1 div.sk-estimator input.sk-toggleable__control:checked~label.sk-toggleable__label {\n",
              "  /* unfitted */\n",
              "  background-color: var(--sklearn-color-unfitted-level-2);\n",
              "}\n",
              "\n",
              "#sk-container-id-1 div.sk-estimator.fitted input.sk-toggleable__control:checked~label.sk-toggleable__label {\n",
              "  /* fitted */\n",
              "  background-color: var(--sklearn-color-fitted-level-2);\n",
              "}\n",
              "\n",
              "#sk-container-id-1 div.sk-label label.sk-toggleable__label,\n",
              "#sk-container-id-1 div.sk-label label {\n",
              "  /* The background is the default theme color */\n",
              "  color: var(--sklearn-color-text-on-default-background);\n",
              "}\n",
              "\n",
              "/* On hover, darken the color of the background */\n",
              "#sk-container-id-1 div.sk-label:hover label.sk-toggleable__label {\n",
              "  color: var(--sklearn-color-text);\n",
              "  background-color: var(--sklearn-color-unfitted-level-2);\n",
              "}\n",
              "\n",
              "/* Label box, darken color on hover, fitted */\n",
              "#sk-container-id-1 div.sk-label.fitted:hover label.sk-toggleable__label.fitted {\n",
              "  color: var(--sklearn-color-text);\n",
              "  background-color: var(--sklearn-color-fitted-level-2);\n",
              "}\n",
              "\n",
              "/* Estimator label */\n",
              "\n",
              "#sk-container-id-1 div.sk-label label {\n",
              "  font-family: monospace;\n",
              "  font-weight: bold;\n",
              "  display: inline-block;\n",
              "  line-height: 1.2em;\n",
              "}\n",
              "\n",
              "#sk-container-id-1 div.sk-label-container {\n",
              "  text-align: center;\n",
              "}\n",
              "\n",
              "/* Estimator-specific */\n",
              "#sk-container-id-1 div.sk-estimator {\n",
              "  font-family: monospace;\n",
              "  border: 1px dotted var(--sklearn-color-border-box);\n",
              "  border-radius: 0.25em;\n",
              "  box-sizing: border-box;\n",
              "  margin-bottom: 0.5em;\n",
              "  /* unfitted */\n",
              "  background-color: var(--sklearn-color-unfitted-level-0);\n",
              "}\n",
              "\n",
              "#sk-container-id-1 div.sk-estimator.fitted {\n",
              "  /* fitted */\n",
              "  background-color: var(--sklearn-color-fitted-level-0);\n",
              "}\n",
              "\n",
              "/* on hover */\n",
              "#sk-container-id-1 div.sk-estimator:hover {\n",
              "  /* unfitted */\n",
              "  background-color: var(--sklearn-color-unfitted-level-2);\n",
              "}\n",
              "\n",
              "#sk-container-id-1 div.sk-estimator.fitted:hover {\n",
              "  /* fitted */\n",
              "  background-color: var(--sklearn-color-fitted-level-2);\n",
              "}\n",
              "\n",
              "/* Specification for estimator info (e.g. \"i\" and \"?\") */\n",
              "\n",
              "/* Common style for \"i\" and \"?\" */\n",
              "\n",
              ".sk-estimator-doc-link,\n",
              "a:link.sk-estimator-doc-link,\n",
              "a:visited.sk-estimator-doc-link {\n",
              "  float: right;\n",
              "  font-size: smaller;\n",
              "  line-height: 1em;\n",
              "  font-family: monospace;\n",
              "  background-color: var(--sklearn-color-background);\n",
              "  border-radius: 1em;\n",
              "  height: 1em;\n",
              "  width: 1em;\n",
              "  text-decoration: none !important;\n",
              "  margin-left: 0.5em;\n",
              "  text-align: center;\n",
              "  /* unfitted */\n",
              "  border: var(--sklearn-color-unfitted-level-1) 1pt solid;\n",
              "  color: var(--sklearn-color-unfitted-level-1);\n",
              "}\n",
              "\n",
              ".sk-estimator-doc-link.fitted,\n",
              "a:link.sk-estimator-doc-link.fitted,\n",
              "a:visited.sk-estimator-doc-link.fitted {\n",
              "  /* fitted */\n",
              "  border: var(--sklearn-color-fitted-level-1) 1pt solid;\n",
              "  color: var(--sklearn-color-fitted-level-1);\n",
              "}\n",
              "\n",
              "/* On hover */\n",
              "div.sk-estimator:hover .sk-estimator-doc-link:hover,\n",
              ".sk-estimator-doc-link:hover,\n",
              "div.sk-label-container:hover .sk-estimator-doc-link:hover,\n",
              ".sk-estimator-doc-link:hover {\n",
              "  /* unfitted */\n",
              "  background-color: var(--sklearn-color-unfitted-level-3);\n",
              "  color: var(--sklearn-color-background);\n",
              "  text-decoration: none;\n",
              "}\n",
              "\n",
              "div.sk-estimator.fitted:hover .sk-estimator-doc-link.fitted:hover,\n",
              ".sk-estimator-doc-link.fitted:hover,\n",
              "div.sk-label-container:hover .sk-estimator-doc-link.fitted:hover,\n",
              ".sk-estimator-doc-link.fitted:hover {\n",
              "  /* fitted */\n",
              "  background-color: var(--sklearn-color-fitted-level-3);\n",
              "  color: var(--sklearn-color-background);\n",
              "  text-decoration: none;\n",
              "}\n",
              "\n",
              "/* Span, style for the box shown on hovering the info icon */\n",
              ".sk-estimator-doc-link span {\n",
              "  display: none;\n",
              "  z-index: 9999;\n",
              "  position: relative;\n",
              "  font-weight: normal;\n",
              "  right: .2ex;\n",
              "  padding: .5ex;\n",
              "  margin: .5ex;\n",
              "  width: min-content;\n",
              "  min-width: 20ex;\n",
              "  max-width: 50ex;\n",
              "  color: var(--sklearn-color-text);\n",
              "  box-shadow: 2pt 2pt 4pt #999;\n",
              "  /* unfitted */\n",
              "  background: var(--sklearn-color-unfitted-level-0);\n",
              "  border: .5pt solid var(--sklearn-color-unfitted-level-3);\n",
              "}\n",
              "\n",
              ".sk-estimator-doc-link.fitted span {\n",
              "  /* fitted */\n",
              "  background: var(--sklearn-color-fitted-level-0);\n",
              "  border: var(--sklearn-color-fitted-level-3);\n",
              "}\n",
              "\n",
              ".sk-estimator-doc-link:hover span {\n",
              "  display: block;\n",
              "}\n",
              "\n",
              "/* \"?\"-specific style due to the `<a>` HTML tag */\n",
              "\n",
              "#sk-container-id-1 a.estimator_doc_link {\n",
              "  float: right;\n",
              "  font-size: 1rem;\n",
              "  line-height: 1em;\n",
              "  font-family: monospace;\n",
              "  background-color: var(--sklearn-color-background);\n",
              "  border-radius: 1rem;\n",
              "  height: 1rem;\n",
              "  width: 1rem;\n",
              "  text-decoration: none;\n",
              "  /* unfitted */\n",
              "  color: var(--sklearn-color-unfitted-level-1);\n",
              "  border: var(--sklearn-color-unfitted-level-1) 1pt solid;\n",
              "}\n",
              "\n",
              "#sk-container-id-1 a.estimator_doc_link.fitted {\n",
              "  /* fitted */\n",
              "  border: var(--sklearn-color-fitted-level-1) 1pt solid;\n",
              "  color: var(--sklearn-color-fitted-level-1);\n",
              "}\n",
              "\n",
              "/* On hover */\n",
              "#sk-container-id-1 a.estimator_doc_link:hover {\n",
              "  /* unfitted */\n",
              "  background-color: var(--sklearn-color-unfitted-level-3);\n",
              "  color: var(--sklearn-color-background);\n",
              "  text-decoration: none;\n",
              "}\n",
              "\n",
              "#sk-container-id-1 a.estimator_doc_link.fitted:hover {\n",
              "  /* fitted */\n",
              "  background-color: var(--sklearn-color-fitted-level-3);\n",
              "}\n",
              "</style><div id=\"sk-container-id-1\" class=\"sk-top-container\"><div class=\"sk-text-repr-fallback\"><pre>RandomForestClassifier(random_state=42)</pre><b>In a Jupyter environment, please rerun this cell to show the HTML representation or trust the notebook. <br />On GitHub, the HTML representation is unable to render, please try loading this page with nbviewer.org.</b></div><div class=\"sk-container\" hidden><div class=\"sk-item\"><div class=\"sk-estimator fitted sk-toggleable\"><input class=\"sk-toggleable__control sk-hidden--visually\" id=\"sk-estimator-id-1\" type=\"checkbox\" checked><label for=\"sk-estimator-id-1\" class=\"sk-toggleable__label fitted sk-toggleable__label-arrow\"><div><div>RandomForestClassifier</div></div><div><a class=\"sk-estimator-doc-link fitted\" rel=\"noreferrer\" target=\"_blank\" href=\"https://scikit-learn.org/1.6/modules/generated/sklearn.ensemble.RandomForestClassifier.html\">?<span>Documentation for RandomForestClassifier</span></a><span class=\"sk-estimator-doc-link fitted\">i<span>Fitted</span></span></div></label><div class=\"sk-toggleable__content fitted\"><pre>RandomForestClassifier(random_state=42)</pre></div> </div></div></div></div>"
            ]
          },
          "metadata": {},
          "execution_count": 9
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "print(\"\\n📈 Evaluating model...\")\n",
        "y_pred = model.predict(X_test)\n",
        "\n",
        "print(f\"Accuracy: {accuracy_score(y_test, y_pred):.4f}\")\n",
        "print(\"\\nClassification Report:\")\n",
        "print(classification_report(y_test, y_pred, target_names=le_crowd.classes_))\n",
        "\n",
        "plt.figure(figsize=(10, 8))\n",
        "cm = confusion_matrix(y_test, y_pred)\n",
        "sns.heatmap(cm, annot=True, fmt='d', cmap='Blues',\n",
        "            xticklabels=le_crowd.classes_,\n",
        "            yticklabels=le_crowd.classes_)\n",
        "plt.title(\"Confusion Matrix\")\n",
        "plt.xlabel('Predicted')\n",
        "plt.ylabel('Actual')\n",
        "plt.show()"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 1000
        },
        "id": "WceixLdtFq22",
        "outputId": "62c92aa1-23de-4ac3-e449-2bc8747bdad4"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "\n",
            "📈 Evaluating model...\n",
            "Accuracy: 0.8590\n",
            "\n",
            "Classification Report:\n",
            "              precision    recall  f1-score   support\n",
            "\n",
            "        High       0.83      0.81      0.82       199\n",
            "         Low       0.86      0.98      0.92       381\n",
            "      Medium       0.89      0.72      0.80       100\n",
            "   Very High       0.87      0.79      0.82       320\n",
            "\n",
            "    accuracy                           0.86      1000\n",
            "   macro avg       0.86      0.82      0.84      1000\n",
            "weighted avg       0.86      0.86      0.86      1000\n",
            "\n"
          ]
        },
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 1000x800 with 2 Axes>"
            ],
            "image/png": "\n"
          },
          "metadata": {}
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "feature_names = ['Hour', 'Day of Week', 'Route', 'Weather', 'Temperature',\n",
        "                 'Is Holiday', 'Is Weekend', 'Has Event', 'Month']\n",
        "\n",
        "plt.figure(figsize=(12, 6))\n",
        "importances = model.feature_importances_\n",
        "indices = np.argsort(importances)[::-1]\n",
        "\n",
        "plt.bar(range(len(importances)), importances[indices])\n",
        "plt.xticks(range(len(importances)), [feature_names[i] for i in indices])\n",
        "plt.title('Feature Importance')\n",
        "plt.xlabel('Features')\n",
        "plt.ylabel('Importance')\n",
        "plt.xticks(rotation=45)\n",
        "plt.tight_layout()\n",
        "plt.show()\n"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 607
        },
        "id": "Fkzs3iR6Ft2K",
        "outputId": "4adad503-1b22-4a5a-b9f1-c36b5fbc19a6"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 1200x600 with 1 Axes>"
            ],
            "image/png": "\n"
          },
          "metadata": {}
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "def predict_with_real_data(model, encoders, location=\"Chennai\", route_id=\"Route_A\"):\n",
        "    \"\"\"\n",
        "    Make crowd prediction using real-time data\n",
        "\n",
        "    Parameters:\n",
        "    - model: Trained ML model\n",
        "    - encoders: Dictionary of LabelEncoders\n",
        "    - location: City name (defaults to Chennai)\n",
        "    - route_id: ID of the transit route\n",
        "\n",
        "    Returns:\n",
        "    - Predicted crowd level and probability\n",
        "    \"\"\"\n",
        "    # Get real-time data\n",
        "    data = get_realtime_data(location)\n",
        "\n",
        "    # Encode categorical features\n",
        "    day_enc = encoders['day_of_week'].transform([data['day_of_week']])[0]\n",
        "    route_enc = encoders['route_id'].transform([route_id])[0]\n",
        "    weather_enc = encoders['weather'].transform([data['weather']])[0]\n",
        "\n",
        "    # Create input data for prediction\n",
        "    input_data = np.array([[\n",
        "        data['hour'],\n",
        "        day_enc,\n",
        "        route_enc,\n",
        "        weather_enc,\n",
        "        data['temperature'],\n",
        "        data['is_holiday'],\n",
        "        data['is_weekend'],\n",
        "        data['has_event'],\n",
        "        data['month']\n",
        "    ]])\n",
        "\n",
        "    # Make prediction\n",
        "    prediction = model.predict(input_data)[0]\n",
        "    probabilities = model.predict_proba(input_data)[0]\n",
        "\n",
        "    # Get prediction label\n",
        "    predicted_label = encoders['crowd_level'].inverse_transform([prediction])[0]\n",
        "\n",
        "    return {\n",
        "        'crowd_level': predicted_label,\n",
        "        'probabilities': probabilities,\n",
        "        'class_labels': encoders['crowd_level'].classes_,\n",
        "        'real_time_data': data\n",
        "    }\n"
      ],
      "metadata": {
        "id": "aEPW2-GMFvzb"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "print(\"\\n🧪 Setting up interactive prediction system...\")\n",
        "\n",
        "# Widgets for user input\n",
        "location_widget = widgets.Text(\n",
        "    value='Chennai',\n",
        "    description='Location:',\n",
        "    style={'description_width': 'initial'},\n",
        "    disabled=True  # Lock to Chennai\n",
        ")\n",
        "\n",
        "hour_widget = widgets.IntSlider(\n",
        "    value=datetime.now().hour,\n",
        "    min=0,\n",
        "    max=23,\n",
        "    step=1,\n",
        "    description='Hour:',\n",
        "    style={'description_width': 'initial'}\n",
        ")\n",
        "\n",
        "day_widget = widgets.Dropdown(\n",
        "    options=['Monday', 'Tuesday', 'Wednesday', 'Thursday', 'Friday', 'Saturday', 'Sunday'],\n",
        "    value=['Monday', 'Tuesday', 'Wednesday', 'Thursday', 'Friday', 'Saturday', 'Sunday'][datetime.now().weekday()],\n",
        "    description='Day:',\n",
        "    style={'description_width': 'initial'}\n",
        ")\n",
        "\n",
        "route_widget = widgets.Dropdown(\n",
        "    options=data_generator.routes,\n",
        "    description='Route:',\n",
        "    style={'description_width': 'initial'}\n",
        ")\n",
        "\n",
        "weather_widget = widgets.Dropdown(\n",
        "    options=data_generator.weather_conditions,\n",
        "    description='Weather:',\n",
        "    style={'description_width': 'initial'}\n",
        ")\n",
        "\n",
        "temp_widget = widgets.FloatSlider(\n",
        "    value=30.0,  # Chennai average temperature\n",
        "    min=20,\n",
        "    max=40,\n",
        "    step=0.5,\n",
        "    description='Temp (°C):',\n",
        "    style={'description_width': 'initial'}\n",
        ")\n",
        "\n",
        "event_widget = widgets.Checkbox(\n",
        "    value=False,\n",
        "    description='Special Event?',\n",
        "    style={'description_width': 'initial'}\n",
        ")\n",
        "\n",
        "holiday_widget = widgets.Checkbox(\n",
        "    value=False,\n",
        "    description='Holiday?',\n",
        "    style={'description_width': 'initial'}\n",
        ")\n",
        "\n",
        "weekend_widget = widgets.Checkbox(\n",
        "    value=datetime.now().weekday() >= 5,\n",
        "    description='Weekend?',\n",
        "    disabled=True,  # This is determined by day selection\n",
        "    style={'description_width': 'initial'}\n",
        ")\n",
        "\n",
        "predict_button = widgets.Button(\n",
        "    description='Predict Crowd Level',\n",
        "    button_style='success'\n",
        ")\n",
        "\n",
        "use_realtime_button = widgets.Button(\n",
        "    description='Use Real-time Data',\n",
        "    button_style='info'\n",
        ")\n",
        "\n",
        "output = widgets.Output()"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 53
        },
        "id": "-j1NF7YaFyWM",
        "outputId": "ba9142cb-ff58-4d96-ca88-229720ea198b"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "\n",
            "🧪 Setting up interactive prediction system...\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "def update_weekend_status(change):\n",
        "    \"\"\"Update weekend checkbox when day changes\"\"\"\n",
        "    if change['new'] in ['Saturday', 'Sunday']:\n",
        "        weekend_widget.value = True\n",
        "    else:\n",
        "        weekend_widget.value = False\n",
        "\n",
        "day_widget.observe(update_weekend_status, names='value')\n",
        "\n",
        "def load_realtime_data(b):\n",
        "    \"\"\"Load current real-time data into widgets\"\"\"\n",
        "    print(\"⏳ Fetching real-time data for Chennai...\")\n",
        "    current_data = get_realtime_data(\"Chennai\")\n",
        "\n",
        "    hour_widget.value = current_data['hour']\n",
        "    day_widget.value = current_data['day_of_week']\n",
        "    weather_widget.value = current_data['weather']\n",
        "    temp_widget.value = current_data['temperature']\n",
        "    holiday_widget.value = current_data['is_holiday'] == 1\n",
        "    event_widget.value = current_data['has_event'] == 1\n",
        "    # weekend_widget is automatically updated via the observer\n",
        "\n",
        "    print(\"✅ Real-time data loaded for Chennai!\")\n",
        "\n",
        "use_realtime_button.on_click(load_realtime_data)\n",
        "\n",
        "def on_predict_clicked(b):\n",
        "    with output:\n",
        "        clear_output()\n",
        "        if b.description == 'Use Real-time Data':\n",
        "            prediction_result = predict_with_real_data(\n",
        "                model=model,\n",
        "                encoders=encoders,\n",
        "                location=\"Chennai\",\n",
        "                route_id=route_widget.value\n",
        "            )\n",
        "\n",
        "            data = prediction_result['real_time_data']\n",
        "            crowd_label = prediction_result['crowd_level']\n",
        "            probabilities = prediction_result['probabilities']\n",
        "            class_labels = prediction_result['class_labels']\n",
        "\n",
        "        else:\n",
        "            # Encode user inputs\n",
        "            hour = hour_widget.value\n",
        "            day = le_day.transform([day_widget.value])[0]\n",
        "            route = le_route.transform([route_widget.value])[0]\n",
        "            weather = le_weather.transform([weather_widget.value])[0]\n",
        "            temp = temp_widget.value\n",
        "            is_holiday = int(holiday_widget.value)\n",
        "            is_weekend = int(weekend_widget.value)\n",
        "            has_event = int(event_widget.value)\n",
        "            month = datetime.now().month\n",
        "\n",
        "            input_data = np.array([[hour, day, route, weather, temp, is_holiday, is_weekend, has_event, month]])\n",
        "            prediction = model.predict(input_data)[0]\n",
        "            crowd_label = le_crowd.inverse_transform([prediction])[0]\n",
        "\n",
        "            # Get probabilities for all classes\n",
        "            probabilities = model.predict_proba(input_data)[0]\n",
        "            class_labels = le_crowd.classes_\n",
        "\n",
        "            data = {\n",
        "                'hour': hour,\n",
        "                'day_of_week': day_widget.value,\n",
        "                'temperature': temp,\n",
        "                'weather': weather_widget.value,\n",
        "                'is_holiday': is_holiday,\n",
        "                'is_weekend': is_weekend,\n",
        "                'has_event': has_event\n",
        "            }\n",
        "\n",
        "        # Display results\n",
        "        print(f\"🚦 Predicted Crowd Level: {crowd_label.upper()}\")\n",
        "        print(f\"\\n📍 Location: Chennai\")\n",
        "        print(f\"🚆 Route: {route_widget.value}\")\n",
        "        print(f\"⏰ Time: {data['hour']}:00\")\n",
        "        print(f\"📅 Day: {data['day_of_week']}\")\n",
        "        print(f\"🌡️ Temperature: {data['temperature']}°C\")\n",
        "        print(f\"🌤️ Weather: {data['weather']}\")\n",
        "        print(f\"🏖️ Weekend: {'Yes' if data.get('is_weekend', 0) == 1 else 'No'}\")\n",
        "        print(f\"🎉 Holiday: {'Yes' if data.get('is_holiday', 0) == 1 else 'No'}\")\n",
        "        print(f\"🎭 Special Event: {'Yes' if data.get('has_event', 0) == 1 else 'No'}\")\n",
        "\n",
        "        print(\"\\nProbabilities for each crowd level:\")\n",
        "        for i, cls in enumerate(class_labels):\n",
        "            print(f\"{cls}: {probabilities[i]:.2f}\")\n",
        "\n",
        "        # Visualization\n",
        "        plt.figure(figsize=(8, 4))\n",
        "        plt.bar(class_labels, probabilities, color=['green', 'blue', 'orange', 'red'])\n",
        "        plt.xlabel('Crowd Level')\n",
        "        plt.ylabel('Probability')\n",
        "        plt.title('Crowd Level Prediction Probabilities')\n",
        "        plt.ylim(0, 1)\n",
        "        plt.show()\n",
        "\n",
        "predict_button.on_click(on_predict_clicked)\n",
        "use_realtime_button.on_click(on_predict_clicked)\n"
      ],
      "metadata": {
        "id": "xqsQy4EsF2Bs"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "print(\"Adjust parameters below or use 'Use Real-time Data' to load current conditions:\")\n",
        "left_column = widgets.VBox([location_widget, hour_widget, day_widget, route_widget])\n",
        "right_column = widgets.VBox([weather_widget, temp_widget, event_widget, holiday_widget, weekend_widget])\n",
        "controls = widgets.HBox([left_column, right_column])\n",
        "buttons = widgets.HBox([predict_button, use_realtime_button])\n",
        "\n",
        "display(controls, buttons, output)\n",
        "\n",
        "# CELL 18: Create enhanced auto-time prediction function\n",
        "def get_automatic_time_prediction(b):\n",
        "    \"\"\"Get crowd prediction using current time and date for Chennai\"\"\"\n",
        "    with output:\n",
        "        clear_output()\n",
        "\n",
        "        # Get current date and time\n",
        "        now = datetime.now()\n",
        "\n",
        "        print(f\"🕒 Getting prediction for current time: {now.strftime('%H:%M')} on {now.strftime('%A, %d %B %Y')}\")\n",
        "\n",
        "        # Update the widgets to reflect current time\n",
        "        hour_widget.value = now.hour\n",
        "        day_widget.value = ['Monday', 'Tuesday', 'Wednesday', 'Thursday', 'Friday', 'Saturday', 'Sunday'][now.weekday()]\n",
        "\n",
        "        # Get prediction using real-time data for Chennai\n",
        "        prediction_result = predict_with_real_data(\n",
        "            model=model,\n",
        "            encoders=encoders,\n",
        "            location=\"Chennai\",\n",
        "            route_id=route_widget.value\n",
        "        )\n",
        "\n",
        "        data = prediction_result['real_time_data']\n",
        "        crowd_label = prediction_result['crowd_level']\n",
        "        probabilities = prediction_result['probabilities']\n",
        "        class_labels = prediction_result['class_labels']\n",
        "\n",
        "        # Display results\n",
        "        print(f\"\\n🚦 CHENNAI PUBLIC TRANSPORT CROWD PREDICTION\")\n",
        "        print(f\"=\" * 50)\n",
        "        print(f\"📍 Location: Chennai\")\n",
        "        print(f\"🚆 Route: {route_widget.value}\")\n",
        "        print(f\"⏰ Current Time: {now.strftime('%H:%M')}\")\n",
        "        print(f\"📅 Today's Date: {now.strftime('%A, %d %B %Y')}\")\n",
        "        print(f\"🌡️ Temperature: {data['temperature']}°C\")\n",
        "        print(f\"🌤️ Weather Condition: {data['weather']}\")\n",
        "        print(f\"🏖️ Weekend: {'Yes' if data.get('is_weekend', 0) == 1 else 'No'}\")\n",
        "        print(f\"🎉 Holiday: {'Yes' if data.get('is_holiday', 0) == 1 else 'No'}\")\n",
        "        print(f\"🎭 Special Event: {'Yes' if data.get('has_event', 0) == 1 else 'No'}\")\n",
        "        print(f\"=\" * 50)\n",
        "        print(f\"\\n🚦 Predicted Crowd Level: {crowd_label.upper()}\")\n",
        "\n",
        "        print(\"\\nProbabilities for each crowd level:\")\n",
        "        for i, cls in enumerate(class_labels):\n",
        "            print(f\"{cls}: {probabilities[i]:.2f}\")\n",
        "\n",
        "        # Visualization\n",
        "        plt.figure(figsize=(10, 5))\n",
        "        colors = ['green', 'blue', 'orange', 'red']\n",
        "        plt.bar(class_labels, probabilities, color=colors)\n",
        "        plt.xlabel('Crowd Level')\n",
        "        plt.ylabel('Probability')\n",
        "        plt.title(f'Chennai Public Transport - {now.strftime(\"%H:%M, %d %B\")}')\n",
        "        plt.ylim(0, 1)\n",
        "\n",
        "        # Add current time and date to the plot\n",
        "        plt.figtext(0.5, 0.01, f\"Prediction made at {now.strftime('%H:%M')} on {now.strftime('%d %B %Y')}\",\n",
        "                   ha=\"center\", fontsize=9, bbox={\"facecolor\":\"orange\", \"alpha\":0.1, \"pad\":5})\n",
        "        plt.tight_layout()\n",
        "        plt.show()\n",
        "\n",
        "# Create a button for automatic time-based prediction\n",
        "auto_time_button = widgets.Button(\n",
        "    description='Get Current Time Prediction',\n",
        "    button_style='success',\n",
        "    icon='clock'\n",
        ")\n",
        "auto_time_button.on_click(get_automatic_time_prediction)\n",
        "\n",
        "# Display the button with clear instructions\n",
        "print(\"\\n🔄 Get prediction using current time, date, and real-time Chennai conditions:\")\n",
        "print(\"Click this button to use the current time and date for your prediction:\")\n",
        "display(auto_time_button)"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 1000,
          "referenced_widgets": [
            "ac79438aab6c4f229d45b3f650861d8f",
            "31708b4d52d74dde9691a91fafb979b5",
            "9f107bcd2ae04edfada70e3c7ebd07b1",
            "aab1024cfd6f404395c1567b319af45d",
            "1ee8c10676a14a8d90ee1f3651810355",
            "aa12d17ae00d44558fcf4d03cd25064b",
            "af663a8aa17d48a2b436733f8cfc1e60",
            "d7aeec065c52444ca203a7cb3a33575b",
            "fde6384f361c4cf59c1e6362734cfaac",
            "b6814d9d5e8a412e8028de50a0f0c863",
            "9998ed87731a4b8f9c141e887a71f51e",
            "4567b2a7c3154e3cae396de221ea52e1",
            "f61abbb25db8461384fe2330c0c475e4",
            "4748b1b7d8a2408c88fe9b2dce449e3d",
            "f20533869f6045189b5efef44bc3282e",
            "1f3da9cf06c94b3ca49bb8962a4f23e8",
            "2a700cd908cb471cb64ffcb19eaeb63a",
            "ab3770801b284d67a0fa3bbcebaa1503",
            "318cf93c57eb47e0991276a6994688be",
            "65168686ce964e7f9b46b5c9ad0a6fa5",
            "18116401ede54dc18b81dd29c663420a",
            "058735cf86574348aec261e9b775c0d0",
            "1f368480013d402c92eb9599595ddbb9",
            "9c59bbc809ed4b62bebebd4a7e97f0c6",
            "44580e4fa4674d97ac315ab0f718a536",
            "c85a67d483d94c94aa362e18f6290e04",
            "82acbdf009a54c08b0cdec864ae64c8c",
            "e9b1b63a111a4148a40f5bda3510e25c",
            "8d61a6b7696143a0a19ca5fedfe2bc93",
            "14cf8f73b32c4d94ab0bbb7c2fe370a9",
            "7ecbcf902bd448a8838e861711fadf4b",
            "6d9d3d3b70524838a5e068b6394cf54b",
            "13eae16279a4416dab7e652a8c42f1ac",
            "21ff3b45f95745e7b0b1d9908d2d7462",
            "8ad60ec26a1843898beb819c5a333f2f",
            "98d303d174954fabbeaffce26ef8c169",
            "f5940462accc424eb45ffd66c215cd20",
            "441e364c7f4640469b240f74aefa2483",
            "f53bea5b85744a0b98a1596f9ac7e7ed",
            "53b90c9e893c4fb08cbd1999fae732f7",
            "7484291e343b4cc58d53188da12fecdd",
            "889aa8873ebc4fd4ab6343bd177bedef",
            "99be53c01d4149239894876f3c3ae24a",
            "fdb689d7426a47358fe18a59ac8d39fa",
            "407b6b11c7ca44bfa372663f040d461d",
            "9375a4c8bb794a18bc85232f1d76d831"
          ]
        },
        "id": "lTgeuogTGCoK",
        "outputId": "4e69611d-f73b-47f3-8853-afa6e658c556"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Adjust parameters below or use 'Use Real-time Data' to load current conditions:\n"
          ]
        },
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "HBox(children=(VBox(children=(Text(value='Chennai', description='Location:', disabled=True, style=DescriptionS…"
            ],
            "application/vnd.jupyter.widget-view+json": {
              "version_major": 2,
              "version_minor": 0,
              "model_id": "ac79438aab6c4f229d45b3f650861d8f"
            }
          },
          "metadata": {}
        },
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "HBox(children=(Button(button_style='success', description='Predict Crowd Level', style=ButtonStyle()), Button(…"
            ],
            "application/vnd.jupyter.widget-view+json": {
              "version_major": 2,
              "version_minor": 0,
              "model_id": "21ff3b45f95745e7b0b1d9908d2d7462"
            }
          },
          "metadata": {}
        },
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "Output()"
            ],
            "application/vnd.jupyter.widget-view+json": {
              "version_major": 2,
              "version_minor": 0,
              "model_id": "889aa8873ebc4fd4ab6343bd177bedef"
            }
          },
          "metadata": {}
        },
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "\n",
            "🔄 Get prediction using current time, date, and real-time Chennai conditions:\n",
            "Click this button to use the current time and date for your prediction:\n"
          ]
        },
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "Button(button_style='success', description='Get Current Time Prediction', icon='clock', style=ButtonStyle())"
            ],
            "application/vnd.jupyter.widget-view+json": {
              "version_major": 2,
              "version_minor": 0,
              "model_id": "fdb689d7426a47358fe18a59ac8d39fa"
            }
          },
          "metadata": {}
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "def auto_time_dashboard():\n",
        "    \"\"\"Creates a dashboard to monitor crowd levels for all routes using current time\"\"\"\n",
        "\n",
        "    # Get current time\n",
        "    now = datetime.now()\n",
        "\n",
        "    # Fetch latest predictions for all routes\n",
        "    routes = data_generator.routes\n",
        "    location = \"Chennai\"\n",
        "\n",
        "    # Header\n",
        "    print(f\"\\n🚦 CHENNAI CROWD LEVEL DASHBOARD\")\n",
        "    print(f\"Current Time: {now.strftime('%H:%M')} on {now.strftime('%A, %d %B %Y')}\")\n",
        "    print(\"=\" * 70)\n",
        "    print(f\"{'Route':<10} | {'Crowd Level':<15} | {'Temperature':<15} | {'Weather':<10} | {'Event':<5}\")\n",
        "    print(\"-\" * 70)\n",
        "\n",
        "    # Store prediction results for visualization\n",
        "    crowd_levels = []\n",
        "    route_names = []\n",
        "\n",
        "    # For each route\n",
        "    for route in routes:\n",
        "        try:\n",
        "            # Try to get prediction\n",
        "            prediction = predict_with_real_data(\n",
        "                model=model,\n",
        "                encoders=encoders,\n",
        "                location=location,\n",
        "                route_id=route\n",
        "            )\n",
        "\n",
        "            # Get data\n",
        "            crowd = prediction['crowd_level']\n",
        "            temp = prediction['real_time_data']['temperature']\n",
        "            weather = prediction['real_time_data']['weather']\n",
        "            has_event = \"Yes\" if prediction['real_time_data'].get('has_event', 0) == 1 else \"No\"\n",
        "\n",
        "            # Store for visualization\n",
        "            crowd_levels.append(crowd)\n",
        "            route_names.append(route)\n",
        "\n",
        "            # Color code based on crowd level\n",
        "            if crowd == 'Low':\n",
        "                crowd_display = f\"\\033[92m{crowd}\\033[0m\"  # Green\n",
        "            elif crowd == 'Medium':\n",
        "                crowd_display = f\"\\033[94m{crowd}\\033[0m\"  # Blue\n",
        "            elif crowd == 'High':\n",
        "                crowd_display = f\"\\033[93m{crowd}\\033[0m\"  # Yellow/Orange\n",
        "            else:\n",
        "                crowd_display = f\"\\033[91m{crowd}\\033[0m\"  # Red\n",
        "\n",
        "            # Print row\n",
        "            print(f\"{route:<10} | {crowd_display:<15} | {temp:<15} | {weather:<10} | {has_event:<5}\")\n",
        "\n",
        "        except Exception as e:\n",
        "            print(f\"{route:<10} | Error: Could not predict - {str(e)[:20]}...\")\n",
        "\n",
        "    print(\"=\" * 70)\n",
        "    print(f\"Last Updated: {now.strftime('%H:%M:%S')}\")\n",
        "\n",
        "    # Create visualization of crowd levels\n",
        "    plt.figure(figsize=(10, 6))\n",
        "    colors = {'Low': 'green', 'Medium': 'blue', 'High': 'orange', 'Very High': 'red'}\n",
        "    bar_colors = [colors.get(level, 'gray') for level in crowd_levels]\n",
        "\n",
        "    plt.bar(route_names, [1]*len(route_names), color=bar_colors)\n",
        "    plt.yticks([])  # Hide y-axis\n",
        "    plt.title(f'Current Crowd Levels Across Chennai Routes - {now.strftime(\"%H:%M\")}')\n",
        "\n",
        "    # Add legend\n",
        "    from matplotlib.patches import Patch\n",
        "    legend_elements = [Patch(facecolor=colors[key], label=key) for key in colors]\n",
        "    plt.legend(handles=legend_elements, title=\"Crowd Levels\")\n",
        "\n",
        "    # Add route labels with crowd levels\n",
        "    for i, route in enumerate(route_names):\n",
        "        plt.text(i, 0.5, crowd_levels[i], ha='center', va='center', color='white', fontweight='bold')\n",
        "\n",
        "    plt.tight_layout()\n",
        "    plt.show()\n",
        "\n",
        "# Create a button for the auto-time dashboard\n",
        "auto_dashboard_button = widgets.Button(\n",
        "    description='Real-time Dashboard',\n",
        "    button_style='primary',\n",
        "    icon='dashboard'\n",
        ")\n",
        "\n",
        "def on_auto_dashboard_clicked(b):\n",
        "    with output:\n",
        "        clear_output()\n",
        "        auto_time_dashboard()\n",
        "\n",
        "auto_dashboard_button.on_click(on_auto_dashboard_clicked)\n",
        "\n",
        "# Display the dashboard button\n",
        "print(\"\\nView current crowd levels across all Chennai routes using real-time data:\")\n",
        "display(auto_dashboard_button)\n"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 85,
          "referenced_widgets": [
            "1e685fcc044c4becbed1c9d753346e5b",
            "b8ca9cf885834a3b987160b9bbb85570",
            "8d765816944548b88280dca4184b7f61"
          ]
        },
        "id": "5E7GZSgqGHC2",
        "outputId": "51e8d44e-0989-434b-b9ba-6c8783c9761a"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "\n",
            "View current crowd levels across all Chennai routes using real-time data:\n"
          ]
        },
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "Button(button_style='primary', description='Real-time Dashboard', icon='dashboard', style=ButtonStyle())"
            ],
            "application/vnd.jupyter.widget-view+json": {
              "version_major": 2,
              "version_minor": 0,
              "model_id": "1e685fcc044c4becbed1c9d753346e5b"
            }
          },
          "metadata": {}
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "print(\"\\n🔄 Setting up continuous real-time prediction system...\")\n",
        "\n",
        "def simulate_realtime_prediction(num_predictions=10, interval_seconds=5):\n",
        "    \"\"\"Simulate continuous real-time predictions for Chennai\"\"\"\n",
        "    print(f\"Simulating {num_predictions} real-time predictions at {interval_seconds}-second intervals...\")\n",
        "\n",
        "    predictions = []\n",
        "\n",
        "    for i in range(num_predictions):\n",
        "        # Select a random route for this prediction\n",
        "        route = np.random.choice(data_generator.routes)\n",
        "\n",
        "        # Get real-time data\n",
        "        try:\n",
        "            prediction_result = predict_with_real_data(\n",
        "                model=model,\n",
        "                encoders=encoders,\n",
        "                location=\"Chennai\",\n",
        "                route_id=route\n",
        "            )\n",
        "\n",
        "            data = prediction_result['real_time_data']\n",
        "            crowd_label = prediction_result['crowd_level']\n",
        "\n",
        "            # Store result\n",
        "            result = {\n",
        "                'timestamp': data['datetime'],\n",
        "                'route': route,\n",
        "                'weather': data['weather'],\n",
        "                'temperature': data['temperature'],\n",
        "                'has_event': data['has_event'],\n",
        "                'predicted_crowd': crowd_label\n",
        "            }\n",
        "            predictions.append(result)\n",
        "\n",
        "            # Print status\n",
        "            print(f\"Prediction {i+1}/{num_predictions}: Route {route} - {crowd_label} crowd\")\n",
        "\n",
        "        except Exception as e:\n",
        "            print(f\"Error in prediction {i+1}: {e}\")\n",
        "\n",
        "        # Pause to simulate real-time delay\n",
        "        if i < num_predictions - 1:\n",
        "            time.sleep(interval_seconds)\n",
        "\n",
        "    # Create dataframe from predictions\n",
        "    pred_df = pd.DataFrame(predictions)\n",
        "\n",
        "    # Display results\n",
        "    if len(pred_df) > 0:\n",
        "        print(\"\\nReal-time Prediction Results:\")\n",
        "        display(pred_df)\n",
        "\n",
        "        # Plot predictions\n",
        "        plt.figure(figsize=(12, 6))\n",
        "\n",
        "        # Convert crowd levels to numeric for plotting\n",
        "        crowd_mapping = {'Low': 0, 'Medium': 1, 'High': 2, 'Very High': 3}\n",
        "        crowd_numeric = [crowd_mapping.get(level, 0) for level in pred_df['predicted_crowd']]\n",
        "\n",
        "        plt.plot(range(len(crowd_numeric)), crowd_numeric, 'o-', linewidth=2)\n",
        "        plt.yticks(range(4), ['Low', 'Medium', 'High', 'Very High'])\n",
        "        plt.xlabel('Prediction Number')\n",
        "        plt.ylabel('Predicted Crowd Level')\n",
        "        plt.title('Real-time Crowd Level Predictions - Chennai')\n",
        "        plt.grid(True)\n",
        "        plt.show()\n",
        "\n",
        "    return pred_df\n",
        "\n",
        "# Add simulation button\n",
        "simulate_button = widgets.Button(\n",
        "    description='Run Simulation',\n",
        "    button_style='warning'\n",
        ")\n",
        "\n",
        "def on_simulate_clicked(b):\n",
        "    with output:\n",
        "        clear_output()\n",
        "        print(f\"🔄 Running real-time simulation for Chennai...\")\n",
        "        simulate_realtime_prediction(\n",
        "            num_predictions=5,\n",
        "            interval_seconds=1\n",
        "        )\n",
        "\n",
        "simulate_button.on_click(on_simulate_clicked)\n",
        "\n",
        "# Display simulation button\n",
        "print(\"\\nWant to see predictions for multiple routes in Chennai in real-time?\")\n",
        "display(simulate_button)"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 122,
          "referenced_widgets": [
            "39ea7233ff5f48dda544706159c87f69",
            "30e6267465954958b2540a6e834faddf",
            "d0b8305b445f4eeda170549ea5fb3acf"
          ]
        },
        "id": "e29BEku9GL7A",
        "outputId": "15f48b01-c927-4983-af78-2aa86dccbf40"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "\n",
            "🔄 Setting up continuous real-time prediction system...\n",
            "\n",
            "Want to see predictions for multiple routes in Chennai in real-time?\n"
          ]
        },
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "Button(button_style='warning', description='Run Simulation', style=ButtonStyle())"
            ],
            "application/vnd.jupyter.widget-view+json": {
              "version_major": 2,
              "version_minor": 0,
              "model_id": "39ea7233ff5f48dda544706159c87f69"
            }
          },
          "metadata": {}
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "print(\"\\n💾 Saving model and encoders...\")\n",
        "joblib.dump(model, 'chennai_crowd_prediction_model.pkl')\n",
        "joblib.dump(encoders, 'chennai_crowd_prediction_encoders.pkl')\n",
        "print(\"Model and encoders saved successfully!\")"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "-jcg4Iv6GYiS",
        "outputId": "edb0aa27-e37d-414d-c95f-c5fde511884a"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "\n",
            "💾 Saving model and encoders...\n",
            "Model and encoders saved successfully!\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "def auto_update_dashboard(interval_seconds=10, updates=3):\n",
        "    \"\"\"Automatically update the dashboard at regular intervals\"\"\"\n",
        "    for i in range(updates):\n",
        "        clear_output(wait=True)\n",
        "        print(f\"🔄 Auto-updating Chennai dashboard ({i+1}/{updates})...\")\n",
        "        auto_time_dashboard()\n",
        "\n",
        "        if i < updates - 1:\n",
        "            print(f\"\\nNext update in {interval_seconds} seconds...\")\n",
        "            time.sleep(interval_seconds)\n",
        "\n",
        "# Add auto-update button\n",
        "auto_update_button = widgets.Button(\n",
        "    description='Auto-update Dashboard',\n",
        "    button_style='info'\n",
        ")\n",
        "\n",
        "def on_auto_update_clicked(b):\n",
        "    with output:\n",
        "        clear_output()\n",
        "        auto_update_dashboard(interval_seconds=10, updates=3)\n",
        "\n",
        "auto_update_button.on_click(on_auto_update_clicked)\n",
        "\n",
        "# Display auto-update button\n",
        "print(\"\\nAutomatically update the Chennai dashboard every 10 seconds:\")\n",
        "display(auto_update_button)"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 85,
          "referenced_widgets": [
            "39982b3e4d1b4cdea29023a830664c9c",
            "bd203c88337e411c83128a84479b2a7c",
            "2ab9b55847564cd692eecc82c40542c2"
          ]
        },
        "id": "Pwpl4MidGah9",
        "outputId": "3563089a-f631-4389-8490-c2d794b5a937"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "\n",
            "Automatically update the Chennai dashboard every 10 seconds:\n"
          ]
        },
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "Button(button_style='info', description='Auto-update Dashboard', style=ButtonStyle())"
            ],
            "application/vnd.jupyter.widget-view+json": {
              "version_major": 2,
              "version_minor": 0,
              "model_id": "39982b3e4d1b4cdea29023a830664c9c"
            }
          },
          "metadata": {}
        }
      ]
    }
  ]
}
